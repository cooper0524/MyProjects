{"ast":null,"code":"var _jsxFileName = \"/Users/Cooper/Bluxury_Catering/bluxury-catering/src/contexts/UserContext.jsx\";\nimport React, { createContext, useState, useEffect } from \"react\";\nimport firebase, { auth } from \"../services/firebase\";\nexport const UserContext = createContext();\n\nfunction UserAuthority() {\n  const [authUser, setAuthUser] = useState(null);\n  const [authority, setAuthority] = useState(false);\n  useEffect(() => {\n    const unsunscribe = auth.onAuthStateChanged(authUser => {\n      authUser ? setAuthUser(authUser) : setAuthUser(null);\n    }).then(() => {\n      //Once the user creation has happened successfully, we can add the currentUser into firestore\n      //with the appropriate details.\n      firebase.firestore().collection(\"users\").doc(auth.currentUser.uid).get().then(function (doc) {\n        if (doc.exists) {\n          setAuthority(doc.data().admin);\n          console.log(\"Document data:\", doc.data().admin);\n        } else {\n          // doc.data() will be undefined in this case\n          console.log(\"No such document!\");\n        }\n      }).catch(function (error) {\n        console.log(\"Error getting document:\", error);\n      }) //ensure we catch any errors at this stage to advise us if something does go wrong\n      .catch(error => {\n        console.log(\"Something went wrong with added user to firestore: \", error);\n      });\n    });\n    return () => unsunscribe();\n  }, []);\n  return authority;\n}\n\nconst UserContextProvider = ({\n  children\n}) => {\n  const authority = UserAuthority();\n  return /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: {\n      authority\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport default UserContextProvider;","map":{"version":3,"sources":["/Users/Cooper/Bluxury_Catering/bluxury-catering/src/contexts/UserContext.jsx"],"names":["React","createContext","useState","useEffect","firebase","auth","UserContext","UserAuthority","authUser","setAuthUser","authority","setAuthority","unsunscribe","onAuthStateChanged","then","firestore","collection","doc","currentUser","uid","get","exists","data","admin","console","log","catch","error","UserContextProvider","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,OAAOC,QAAP,IAAmBC,IAAnB,QAA+B,sBAA/B;AAEA,OAAO,MAAMC,WAAW,GAAGL,aAAa,EAAjC;;AAEP,SAASM,aAAT,GAAyB;AACvB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,WAAW,GAAGP,IAAI,CACrBQ,kBADiB,CACGL,QAAD,IAAc;AAChCA,MAAAA,QAAQ,GAAGC,WAAW,CAACD,QAAD,CAAd,GAA2BC,WAAW,CAAC,IAAD,CAA9C;AACD,KAHiB,EAIjBK,IAJiB,CAIZ,MAAM;AACV;AACA;AACAV,MAAAA,QAAQ,CACLW,SADH,GAEGC,UAFH,CAEc,OAFd,EAGGC,GAHH,CAGOZ,IAAI,CAACa,WAAL,CAAiBC,GAHxB,EAIGC,GAJH,GAKGN,IALH,CAKQ,UAAUG,GAAV,EAAe;AACnB,YAAIA,GAAG,CAACI,MAAR,EAAgB;AACdV,UAAAA,YAAY,CAACM,GAAG,CAACK,IAAJ,GAAWC,KAAZ,CAAZ;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BR,GAAG,CAACK,IAAJ,GAAWC,KAAzC;AACD,SAHD,MAGO;AACL;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD;AACF,OAbH,EAcGC,KAdH,CAcS,UAAUC,KAAV,EAAiB;AACtBH,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCE,KAAvC;AACD,OAhBH,EAiBE;AAjBF,OAkBGD,KAlBH,CAkBUC,KAAD,IAAW;AAChBH,QAAAA,OAAO,CAACC,GAAR,CACE,qDADF,EAEEE,KAFF;AAID,OAvBH;AAwBD,KA/BiB,CAApB;AAgCA,WAAO,MAAMf,WAAW,EAAxB;AACD,GAlCQ,EAkCN,EAlCM,CAAT;AAmCA,SAAOF,SAAP;AACD;;AAED,MAAMkB,mBAAmB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC5C,QAAMnB,SAAS,GAAGH,aAAa,EAA/B;AAEA,sBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEG,MAAAA;AAAF,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGmB,QADH,CADF;AAKD,CARD;;AAUA,eAAeD,mBAAf","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport firebase, { auth } from \"../services/firebase\";\n\nexport const UserContext = createContext();\n\nfunction UserAuthority() {\n  const [authUser, setAuthUser] = useState(null);\n  const [authority, setAuthority] = useState(false);\n\n  useEffect(() => {\n    const unsunscribe = auth\n      .onAuthStateChanged((authUser) => {\n        authUser ? setAuthUser(authUser) : setAuthUser(null);\n      })\n      .then(() => {\n        //Once the user creation has happened successfully, we can add the currentUser into firestore\n        //with the appropriate details.\n        firebase\n          .firestore()\n          .collection(\"users\")\n          .doc(auth.currentUser.uid)\n          .get()\n          .then(function (doc) {\n            if (doc.exists) {\n              setAuthority(doc.data().admin);\n              console.log(\"Document data:\", doc.data().admin);\n            } else {\n              // doc.data() will be undefined in this case\n              console.log(\"No such document!\");\n            }\n          })\n          .catch(function (error) {\n            console.log(\"Error getting document:\", error);\n          })\n          //ensure we catch any errors at this stage to advise us if something does go wrong\n          .catch((error) => {\n            console.log(\n              \"Something went wrong with added user to firestore: \",\n              error\n            );\n          });\n      });\n    return () => unsunscribe();\n  }, []);\n  return authority;\n}\n\nconst UserContextProvider = ({ children }) => {\n  const authority = UserAuthority();\n\n  return (\n    <UserContext.Provider value={{ authority }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport default UserContextProvider;\n"]},"metadata":{},"sourceType":"module"}