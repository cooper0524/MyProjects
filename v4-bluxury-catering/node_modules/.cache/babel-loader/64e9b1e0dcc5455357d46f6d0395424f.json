{"ast":null,"code":"var _classCallCheck = require(\"/Users/Cooper/Bluxury_Catering/bluxury-catering copy 3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Cooper/Bluxury_Catering/bluxury-catering copy 3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n/**\r\n * Created by ying.wu on 2017/6/21.\r\n */\nvar helper = require('./helper.js');\n\nvar verify = require('./verification.js');\n\nvar ECpayError = require('./error.js');\n\nvar iconv = require('iconv-lite');\n\nvar crypto = require('crypto');\n\nvar url = require('url');\n\nvar querystring = require('querystring');\n\nvar http = require('http');\n\nvar https = require('https');\n\nvar ECpayExecRefundAndGrant = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function ECpayExecRefundAndGrant() {\n    _classCallCheck(this, ECpayExecRefundAndGrant);\n\n    this.helper = new helper(); // this.verify_act_api = new verify.ActParamVerify();\n  }\n\n  _createClass(ECpayExecRefundAndGrant, [{\n    key: \"credit_do_act\",\n    value: function credit_do_act(parameters) {\n      this._act_base_proc(parameters);\n\n      var res = this._act_pos_proc(parameters, 'DoAction');\n\n      return res;\n    }\n  }, {\n    key: \"aio_capture\",\n    value: function aio_capture(parameters) {\n      this._act_base_proc(parameters);\n\n      var res = this._act_pos_proc(parameters, 'Capture');\n\n      return res;\n    }\n  }, {\n    key: \"_act_base_proc\",\n    value: function _act_base_proc(params) {\n      if (params.constructor === Object) {\n        // Process PlatformID & MerchantID by contractor setting\n        if (this.helper.is_contractor()) {\n          params['PlatformID'] = this.helper.get_mercid();\n\n          if (params['MerchantID'] === null) {\n            throw new Error(\"[MerchantID] should be specified when you're contractor-Platform.\");\n          }\n        } else {\n          params['PlatformID'] = '';\n          params['MerchantID'] = this.helper.get_mercid();\n        }\n      } else {\n        throw new ECpayError.ECpayInvalidParam(\"Received parameter object must be a Object.\");\n      }\n    }\n  }, {\n    key: \"_act_pos_proc\",\n    value: function _act_pos_proc(params, apiname) {\n      var verify_act_api = new verify.ActParamVerify(apiname);\n      verify_act_api.verify_act_param(params); // encode special param\n      // Insert chkmacval\n      // console.log(params);\n\n      var chkmac = this.helper.gen_chk_mac_value(params);\n      params['CheckMacValue'] = chkmac; // gen post html\n\n      var api_url = verify_act_api.get_svc_url(apiname, this.helper.get_op_mode()); //post from server\n\n      var resp = this.helper.http_request('POST', api_url, params); // return post response\n\n      return new Promise(function (resolve, reject) {\n        resp.then(function (result) {\n          return resolve(iconv.decode(Buffer.concat(result), 'utf-8'));\n        }).catch(function (err) {\n          reject(err);\n        });\n      });\n    }\n  }]);\n\n  return ECpayExecRefundAndGrant;\n}();\n\nmodule.exports = ECpayExecRefundAndGrant;","map":{"version":3,"sources":["/Users/Cooper/Bluxury_Catering/bluxury-catering copy 3/node_modules/ecpay-payment/lib/ecpay_payment/exec_grant_refund.js"],"names":["helper","require","verify","ECpayError","iconv","crypto","url","querystring","http","https","ECpayExecRefundAndGrant","parameters","_act_base_proc","res","_act_pos_proc","params","constructor","Object","is_contractor","get_mercid","Error","ECpayInvalidParam","apiname","verify_act_api","ActParamVerify","verify_act_param","chkmac","gen_chk_mac_value","api_url","get_svc_url","get_op_mode","resp","http_request","Promise","resolve","reject","then","result","decode","Buffer","concat","catch","err","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * Created by ying.wu on 2017/6/21.\r\n */\r\nconst helper = require('./helper.js');\r\nconst verify = require('./verification.js');\r\nconst ECpayError = require('./error.js');\r\nconst iconv = require('iconv-lite');\r\nconst crypto = require('crypto');\r\nconst url = require('url');\r\nconst querystring = require('querystring');\r\nconst http = require('http');\r\nconst https = require('https');\r\n\r\nclass ECpayExecRefundAndGrant{\r\n    constructor(){\r\n        this.helper = new helper();\r\n        // this.verify_act_api = new verify.ActParamVerify();\r\n    }\r\n\r\n    credit_do_act(parameters){\r\n        this._act_base_proc(parameters);\r\n        let res = this._act_pos_proc(parameters, 'DoAction');\r\n        return res;\r\n    }\r\n\r\n    aio_capture(parameters){\r\n        this._act_base_proc(parameters);\r\n        let res = this._act_pos_proc(parameters , 'Capture');\r\n        return res;\r\n    }\r\n\r\n    _act_base_proc(params){\r\n        if (params.constructor === Object){\r\n            // Process PlatformID & MerchantID by contractor setting\r\n            if (this.helper.is_contractor()){\r\n                params['PlatformID'] = this.helper.get_mercid();\r\n                if (params['MerchantID'] === null){\r\n                    throw new Error(`[MerchantID] should be specified when you're contractor-Platform.`);\r\n                }\r\n            } else {\r\n                params['PlatformID'] = '';\r\n                params['MerchantID'] = this.helper.get_mercid();\r\n            }\r\n        } else {\r\n            throw new ECpayError.ECpayInvalidParam(`Received parameter object must be a Object.`);\r\n        }\r\n    }\r\n\r\n    _act_pos_proc(params, apiname){\r\n        let verify_act_api = new verify.ActParamVerify(apiname);\r\n        verify_act_api.verify_act_param(params);\r\n        // encode special param\r\n\r\n        // Insert chkmacval\r\n        // console.log(params);\r\n        let chkmac = this.helper.gen_chk_mac_value(params);\r\n        params['CheckMacValue'] = chkmac;\r\n        // gen post html\r\n        let api_url = verify_act_api.get_svc_url(apiname, this.helper.get_op_mode());\r\n        //post from server\r\n        let resp = this.helper.http_request('POST', api_url, params);\r\n        // return post response\r\n        return new Promise((resolve, reject) => {\r\n            resp.then(function (result) {\r\n                return resolve(iconv.decode(Buffer.concat(result), 'utf-8'));\r\n            }).catch(function (err) {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n}\r\nmodule.exports = ECpayExecRefundAndGrant;"]},"metadata":{},"sourceType":"script"}