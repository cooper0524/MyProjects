{"ast":null,"code":"var _classCallCheck = require(\"/Users/Cooper/Bluxury_Catering/bluxury-catering copy 3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Cooper/Bluxury_Catering/bluxury-catering copy 3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n/**\r\n * Created by ying.wu on 2017/6/21.\r\n */\nvar helper = require('./helper.js');\n\nvar verify = require('./verification.js');\n\nvar ECpayError = require('./error.js');\n\nvar iconv = require('iconv-lite');\n\nvar crypto = require('crypto');\n\nvar url = require('url');\n\nvar querystring = require('querystring');\n\nvar http = require('http');\n\nvar https = require('https');\n\nvar ECpayQueryClient = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function ECpayQueryClient() {\n    _classCallCheck(this, ECpayQueryClient);\n\n    this.helper = new helper(); // this.verify_query_api = new verify.QueryParamVerify();\n  }\n\n  _createClass(ECpayQueryClient, [{\n    key: \"query_trade_info\",\n    value: function query_trade_info(parameters) {\n      this._query_base_proc(parameters);\n\n      parameters['TimeStamp'] = (parseInt(this._get_curr_unix_time()) + 120).toString();\n\n      var res = this._query_pos_proc(parameters, 'QueryTradeInfo');\n\n      return res;\n    }\n  }, {\n    key: \"query_credit_period\",\n    value: function query_credit_period(parameters) {\n      this._query_base_proc(parameters);\n\n      parameters['TimeStamp'] = (parseInt(this._get_curr_unix_time()) + 120).toString();\n\n      var res = this._query_pos_proc(parameters, 'QueryCreditCardPeriodInfo');\n\n      return res;\n    }\n  }, {\n    key: \"query_transac_csv\",\n    value: function query_transac_csv(parameters) {\n      this._query_base_proc(parameters);\n\n      delete parameters['PlatformID'];\n\n      var res = this._query_pos_proc(parameters, 'TradeNoAio', true);\n\n      return res;\n    }\n  }, {\n    key: \"query_credit_single\",\n    value: function query_credit_single(parameters) {\n      this._query_base_proc(parameters);\n\n      delete parameters['PlatformID'];\n\n      var res = this._query_pos_proc(parameters, 'QueryTradeV2');\n\n      return res;\n    }\n  }, {\n    key: \"query_credit_csv\",\n    value: function query_credit_csv(parameters) {\n      this._query_base_proc(parameters);\n\n      delete parameters['PlatformID'];\n\n      var res = this._query_pos_proc(parameters, 'FundingReconDetail', true);\n\n      return res;\n    }\n  }, {\n    key: \"create_server_order\",\n    value: function create_server_order(parameters) {\n      this._query_base_proc(parameters);\n\n      var res = this._query_pos_proc(parameters, 'CreateServerOrder');\n\n      return res;\n    }\n  }, {\n    key: \"_get_curr_unix_time\",\n    value: function _get_curr_unix_time() {\n      return this.helper.get_curr_unixtime();\n    }\n  }, {\n    key: \"_query_base_proc\",\n    value: function _query_base_proc(params) {\n      if (params.constructor === Object) {\n        // Process PlatformID & MerchantID by contractor setting\n        if (this.helper.is_contractor()) {\n          params['PlatformID'] = this.helper.get_mercid();\n\n          if (params['MerchantID'] === null) {\n            throw new Error(\"[MerchantID] should be specified when you're contractor-Platform.\");\n          }\n        } else {\n          params['PlatformID'] = '';\n          params['MerchantID'] = this.helper.get_mercid();\n        }\n      } else {\n        throw new ECpayError.ECpayInvalidParam(\"Received parameter object must be a Object.\");\n      }\n    }\n  }, {\n    key: \"_query_pos_proc\",\n    value: function _query_pos_proc(params, apiname) {\n      var big5_trans = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var verify_query_api = new verify.QueryParamVerify(apiname);\n      verify_query_api.verify_query_param(params);\n      var exclusive_list = [];\n\n      if (apiname === 'CreateServerOrder') {\n        exclusive_list = ['PaymentToken'];\n      } // for PaymentToken\n\n\n      var exclusive_ele = {};\n      exclusive_list.forEach(function (param) {\n        exclusive_ele[param] = params[param];\n        delete params[param];\n      }); // encode special param\n      // Insert chkmacval\n\n      console.log(params);\n      var chkmac = this.helper.gen_chk_mac_value(params);\n      params['CheckMacValue'] = chkmac;\n      var helper = this.helper;\n      exclusive_list.forEach(function (param) {\n        var paymenttoken = helper.gen_aes_encrypt(exclusive_ele);\n        params[param] = paymenttoken;\n      });\n      console.log(params); // gen post html\n\n      var api_url = verify_query_api.get_svc_url(apiname, this.helper.get_op_mode()); // post from server\n\n      var resp = this.helper.http_request('POST', api_url, params);\n      return new Promise(function (resolve, reject) {\n        resp.then(function (result) {\n          if (big5_trans) {\n            return resolve(iconv.decode(Buffer.concat(result), 'big5'));\n          } else {\n            return resolve(iconv.decode(Buffer.concat(result), 'utf-8'));\n          }\n        }).catch(function (err) {\n          reject(err);\n        });\n      });\n    }\n  }]);\n\n  return ECpayQueryClient;\n}();\n\nmodule.exports = ECpayQueryClient;","map":{"version":3,"sources":["/Users/Cooper/Bluxury_Catering/bluxury-catering copy 3/node_modules/ecpay-payment/lib/ecpay_payment/query_client.js"],"names":["helper","require","verify","ECpayError","iconv","crypto","url","querystring","http","https","ECpayQueryClient","parameters","_query_base_proc","parseInt","_get_curr_unix_time","toString","res","_query_pos_proc","get_curr_unixtime","params","constructor","Object","is_contractor","get_mercid","Error","ECpayInvalidParam","apiname","big5_trans","verify_query_api","QueryParamVerify","verify_query_param","exclusive_list","exclusive_ele","forEach","param","console","log","chkmac","gen_chk_mac_value","paymenttoken","gen_aes_encrypt","api_url","get_svc_url","get_op_mode","resp","http_request","Promise","resolve","reject","then","result","decode","Buffer","concat","catch","err","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * Created by ying.wu on 2017/6/21.\r\n */\r\nconst helper = require('./helper.js');\r\nconst verify = require('./verification.js');\r\nconst ECpayError = require('./error.js');\r\nconst iconv =require('iconv-lite');\r\nconst crypto = require('crypto');\r\nconst url = require('url');\r\nconst querystring = require('querystring');\r\nconst http = require('http');\r\nconst https = require('https');\r\n\r\nclass ECpayQueryClient{\r\n    constructor(){\r\n        this.helper = new helper();\r\n        // this.verify_query_api = new verify.QueryParamVerify();\r\n    }\r\n\r\n    query_trade_info(parameters){\r\n        this._query_base_proc(parameters);\r\n        parameters['TimeStamp'] = (parseInt(this._get_curr_unix_time()) + 120).toString();\r\n        let res = this._query_pos_proc(parameters, 'QueryTradeInfo');\r\n        return res;\r\n    }\r\n\r\n    query_credit_period(parameters){\r\n        this._query_base_proc(parameters);\r\n        parameters['TimeStamp'] = (parseInt(this._get_curr_unix_time()) + 120).toString();\r\n        let res = this._query_pos_proc(parameters, 'QueryCreditCardPeriodInfo');\r\n        return res;\r\n    }\r\n\r\n    query_transac_csv(parameters){\r\n        this._query_base_proc(parameters);\r\n        delete parameters['PlatformID'];\r\n        let res = this._query_pos_proc(parameters, 'TradeNoAio', true);\r\n        return res;\r\n    }\r\n\r\n    query_credit_single(parameters){\r\n        this._query_base_proc(parameters);\r\n        delete parameters['PlatformID'];\r\n        let res = this._query_pos_proc(parameters, 'QueryTradeV2');\r\n        return res;\r\n    }\r\n\r\n    query_credit_csv(parameters){\r\n        this._query_base_proc(parameters);\r\n        delete parameters['PlatformID'];\r\n        let res = this._query_pos_proc(parameters, 'FundingReconDetail', true);\r\n        return res;\r\n    }\r\n\r\n    create_server_order(parameters){\r\n        this._query_base_proc(parameters);\r\n        let res = this._query_pos_proc(parameters, 'CreateServerOrder');\r\n        return res;\r\n    }\r\n\r\n    _get_curr_unix_time(){\r\n        return this.helper.get_curr_unixtime();\r\n    }\r\n\r\n    _query_base_proc(params){\r\n        if (params.constructor === Object){\r\n\r\n            // Process PlatformID & MerchantID by contractor setting\r\n            if (this.helper.is_contractor()){\r\n                params['PlatformID'] = this.helper.get_mercid();\r\n                if (params['MerchantID'] === null){\r\n                    throw new Error(`[MerchantID] should be specified when you're contractor-Platform.`);\r\n                }\r\n            } else {\r\n                params['PlatformID'] = '';\r\n                params['MerchantID'] = this.helper.get_mercid();\r\n            }\r\n        } else {\r\n            throw new ECpayError.ECpayInvalidParam(`Received parameter object must be a Object.`);\r\n        }\r\n    }\r\n\r\n    _query_pos_proc(params, apiname , big5_trans=false){\r\n        let verify_query_api = new verify.QueryParamVerify(apiname);\r\n        verify_query_api.verify_query_param(params);\r\n        let exclusive_list = [];\r\n        if (apiname === 'CreateServerOrder'){\r\n            exclusive_list = ['PaymentToken'];\r\n        }\r\n        // for PaymentToken\r\n        let exclusive_ele = {};\r\n        exclusive_list.forEach(function (param) {\r\n           exclusive_ele[param] = params[param];\r\n           delete params[param];\r\n        });\r\n        // encode special param\r\n        // Insert chkmacval\r\n        console.log(params);\r\n        let chkmac = this.helper.gen_chk_mac_value(params);\r\n        params['CheckMacValue'] = chkmac;\r\n\r\n        let helper = this.helper;\r\n        exclusive_list.forEach(function (param) {\r\n           let paymenttoken = helper.gen_aes_encrypt(exclusive_ele);\r\n           params[param] = paymenttoken;\r\n        });\r\n        console.log(params);\r\n\r\n        // gen post html\r\n        let api_url = verify_query_api.get_svc_url(apiname, this.helper.get_op_mode());\r\n        // post from server\r\n        let resp = this.helper.http_request('POST', api_url, params);\r\n        return new Promise((resolve, reject) => {\r\n            resp.then(function (result) {\r\n                    if (big5_trans) {\r\n                        return resolve(iconv.decode(Buffer.concat(result), 'big5'));\r\n                    } else {\r\n                        return resolve(iconv.decode(Buffer.concat(result), 'utf-8'));\r\n                    }\r\n\r\n            }).catch(function (err) {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n}\r\nmodule.exports = ECpayQueryClient;"]},"metadata":{},"sourceType":"script"}