{"ast":null,"code":"\"use strict\";\n\nvar Buffer = require(\"buffer\").Buffer; // Export Node.js internal encodings.\n\n\nmodule.exports = {\n  // Encodings\n  utf8: {\n    type: \"_internal\",\n    bomAware: true\n  },\n  cesu8: {\n    type: \"_internal\",\n    bomAware: true\n  },\n  unicode11utf8: \"utf8\",\n  ucs2: {\n    type: \"_internal\",\n    bomAware: true\n  },\n  utf16le: \"ucs2\",\n  binary: {\n    type: \"_internal\"\n  },\n  iso88591: \"binary\",\n  base64: {\n    type: \"_internal\"\n  },\n  hex: {\n    type: \"_internal\"\n  },\n  // Codec.\n  _internal: InternalCodec\n}; //------------------------------------------------------------------------------\n\nfunction InternalCodec(codecOptions, iconv) {\n  this.enc = codecOptions.encodingName;\n  this.bomAware = codecOptions.bomAware;\n  if (this.enc === \"base64\") this.encoder = InternalEncoderBase64;else if (this.enc === \"cesu8\") {\n    this.enc = \"utf8\"; // Use utf8 for decoding.\n\n    this.encoder = InternalEncoderCesu8; // Add decoder for versions of Node not supporting CESU-8\n\n    if (new Buffer('eda0bdedb2a9', 'hex').toString() !== 'ðŸ’©') {\n      this.decoder = InternalDecoderCesu8;\n      this.defaultCharUnicode = iconv.defaultCharUnicode;\n    }\n  }\n}\n\nInternalCodec.prototype.encoder = InternalEncoder;\nInternalCodec.prototype.decoder = InternalDecoder; //------------------------------------------------------------------------------\n// We use node.js internal decoder. Its signature is the same as ours.\n\nvar StringDecoder = require('string_decoder').StringDecoder;\n\nif (!StringDecoder.prototype.end) // Node v0.8 doesn't have this method.\n  StringDecoder.prototype.end = function () {};\n\nfunction InternalDecoder(options, codec) {\n  StringDecoder.call(this, codec.enc);\n}\n\nInternalDecoder.prototype = StringDecoder.prototype; //------------------------------------------------------------------------------\n// Encoder is mostly trivial\n\nfunction InternalEncoder(options, codec) {\n  this.enc = codec.enc;\n}\n\nInternalEncoder.prototype.write = function (str) {\n  return new Buffer(str, this.enc);\n};\n\nInternalEncoder.prototype.end = function () {}; //------------------------------------------------------------------------------\n// Except base64 encoder, which must keep its state.\n\n\nfunction InternalEncoderBase64(options, codec) {\n  this.prevStr = '';\n}\n\nInternalEncoderBase64.prototype.write = function (str) {\n  str = this.prevStr + str;\n  var completeQuads = str.length - str.length % 4;\n  this.prevStr = str.slice(completeQuads);\n  str = str.slice(0, completeQuads);\n  return new Buffer(str, \"base64\");\n};\n\nInternalEncoderBase64.prototype.end = function () {\n  return new Buffer(this.prevStr, \"base64\");\n}; //------------------------------------------------------------------------------\n// CESU-8 encoder is also special.\n\n\nfunction InternalEncoderCesu8(options, codec) {}\n\nInternalEncoderCesu8.prototype.write = function (str) {\n  var buf = new Buffer(str.length * 3),\n      bufIdx = 0;\n\n  for (var i = 0; i < str.length; i++) {\n    var charCode = str.charCodeAt(i); // Naive implementation, but it works because CESU-8 is especially easy\n    // to convert from UTF-16 (which all JS strings are encoded in).\n\n    if (charCode < 0x80) buf[bufIdx++] = charCode;else if (charCode < 0x800) {\n      buf[bufIdx++] = 0xC0 + (charCode >>> 6);\n      buf[bufIdx++] = 0x80 + (charCode & 0x3f);\n    } else {\n      // charCode will always be < 0x10000 in javascript.\n      buf[bufIdx++] = 0xE0 + (charCode >>> 12);\n      buf[bufIdx++] = 0x80 + (charCode >>> 6 & 0x3f);\n      buf[bufIdx++] = 0x80 + (charCode & 0x3f);\n    }\n  }\n\n  return buf.slice(0, bufIdx);\n};\n\nInternalEncoderCesu8.prototype.end = function () {}; //------------------------------------------------------------------------------\n// CESU-8 decoder is not implemented in Node v4.0+\n\n\nfunction InternalDecoderCesu8(options, codec) {\n  this.acc = 0;\n  this.contBytes = 0;\n  this.accBytes = 0;\n  this.defaultCharUnicode = codec.defaultCharUnicode;\n}\n\nInternalDecoderCesu8.prototype.write = function (buf) {\n  var acc = this.acc,\n      contBytes = this.contBytes,\n      accBytes = this.accBytes,\n      res = '';\n\n  for (var i = 0; i < buf.length; i++) {\n    var curByte = buf[i];\n\n    if ((curByte & 0xC0) !== 0x80) {\n      // Leading byte\n      if (contBytes > 0) {\n        // Previous code is invalid\n        res += this.defaultCharUnicode;\n        contBytes = 0;\n      }\n\n      if (curByte < 0x80) {\n        // Single-byte code\n        res += String.fromCharCode(curByte);\n      } else if (curByte < 0xE0) {\n        // Two-byte code\n        acc = curByte & 0x1F;\n        contBytes = 1;\n        accBytes = 1;\n      } else if (curByte < 0xF0) {\n        // Three-byte code\n        acc = curByte & 0x0F;\n        contBytes = 2;\n        accBytes = 1;\n      } else {\n        // Four or more are not supported for CESU-8.\n        res += this.defaultCharUnicode;\n      }\n    } else {\n      // Continuation byte\n      if (contBytes > 0) {\n        // We're waiting for it.\n        acc = acc << 6 | curByte & 0x3f;\n        contBytes--;\n        accBytes++;\n\n        if (contBytes === 0) {\n          // Check for overlong encoding, but support Modified UTF-8 (encoding NULL as C0 80)\n          if (accBytes === 2 && acc < 0x80 && acc > 0) res += this.defaultCharUnicode;else if (accBytes === 3 && acc < 0x800) res += this.defaultCharUnicode;else // Actually add character.\n            res += String.fromCharCode(acc);\n        }\n      } else {\n        // Unexpected continuation byte\n        res += this.defaultCharUnicode;\n      }\n    }\n  }\n\n  this.acc = acc;\n  this.contBytes = contBytes;\n  this.accBytes = accBytes;\n  return res;\n};\n\nInternalDecoderCesu8.prototype.end = function () {\n  var res = 0;\n  if (this.contBytes > 0) res += this.defaultCharUnicode;\n  return res;\n};","map":{"version":3,"sources":["/Users/Cooper/Bluxury_Catering/bluxury-catering copy 4/node_modules/ECPAY_Payment_node_js/node_modules/iconv-lite/encodings/internal.js"],"names":["Buffer","require","module","exports","utf8","type","bomAware","cesu8","unicode11utf8","ucs2","utf16le","binary","iso88591","base64","hex","_internal","InternalCodec","codecOptions","iconv","enc","encodingName","encoder","InternalEncoderBase64","InternalEncoderCesu8","toString","decoder","InternalDecoderCesu8","defaultCharUnicode","prototype","InternalEncoder","InternalDecoder","StringDecoder","end","options","codec","call","write","str","prevStr","completeQuads","length","slice","buf","bufIdx","i","charCode","charCodeAt","acc","contBytes","accBytes","res","curByte","String","fromCharCode"],"mappings":"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","sourcesContent":["\"use strict\";\nvar Buffer = require(\"buffer\").Buffer;\n\n// Export Node.js internal encodings.\n\nmodule.exports = {\n    // Encodings\n    utf8:   { type: \"_internal\", bomAware: true},\n    cesu8:  { type: \"_internal\", bomAware: true},\n    unicode11utf8: \"utf8\",\n\n    ucs2:   { type: \"_internal\", bomAware: true},\n    utf16le: \"ucs2\",\n\n    binary: { type: \"_internal\" },\n    iso88591: \"binary\",\n\n    base64: { type: \"_internal\" },\n    hex:    { type: \"_internal\" },\n\n    // Codec.\n    _internal: InternalCodec,\n};\n\n//------------------------------------------------------------------------------\n\nfunction InternalCodec(codecOptions, iconv) {\n    this.enc = codecOptions.encodingName;\n    this.bomAware = codecOptions.bomAware;\n\n    if (this.enc === \"base64\")\n        this.encoder = InternalEncoderBase64;\n    else if (this.enc === \"cesu8\") {\n        this.enc = \"utf8\"; // Use utf8 for decoding.\n        this.encoder = InternalEncoderCesu8;\n\n        // Add decoder for versions of Node not supporting CESU-8\n        if (new Buffer('eda0bdedb2a9', 'hex').toString() !== 'ðŸ’©') {\n            this.decoder = InternalDecoderCesu8;\n            this.defaultCharUnicode = iconv.defaultCharUnicode;\n        }\n    }\n}\n\nInternalCodec.prototype.encoder = InternalEncoder;\nInternalCodec.prototype.decoder = InternalDecoder;\n\n//------------------------------------------------------------------------------\n\n// We use node.js internal decoder. Its signature is the same as ours.\nvar StringDecoder = require('string_decoder').StringDecoder;\n\nif (!StringDecoder.prototype.end) // Node v0.8 doesn't have this method.\n    StringDecoder.prototype.end = function() {};\n\n\nfunction InternalDecoder(options, codec) {\n    StringDecoder.call(this, codec.enc);\n}\n\nInternalDecoder.prototype = StringDecoder.prototype;\n\n\n//------------------------------------------------------------------------------\n// Encoder is mostly trivial\n\nfunction InternalEncoder(options, codec) {\n    this.enc = codec.enc;\n}\n\nInternalEncoder.prototype.write = function(str) {\n    return new Buffer(str, this.enc);\n}\n\nInternalEncoder.prototype.end = function() {\n}\n\n\n//------------------------------------------------------------------------------\n// Except base64 encoder, which must keep its state.\n\nfunction InternalEncoderBase64(options, codec) {\n    this.prevStr = '';\n}\n\nInternalEncoderBase64.prototype.write = function(str) {\n    str = this.prevStr + str;\n    var completeQuads = str.length - (str.length % 4);\n    this.prevStr = str.slice(completeQuads);\n    str = str.slice(0, completeQuads);\n\n    return new Buffer(str, \"base64\");\n}\n\nInternalEncoderBase64.prototype.end = function() {\n    return new Buffer(this.prevStr, \"base64\");\n}\n\n\n//------------------------------------------------------------------------------\n// CESU-8 encoder is also special.\n\nfunction InternalEncoderCesu8(options, codec) {\n}\n\nInternalEncoderCesu8.prototype.write = function(str) {\n    var buf = new Buffer(str.length * 3), bufIdx = 0;\n    for (var i = 0; i < str.length; i++) {\n        var charCode = str.charCodeAt(i);\n        // Naive implementation, but it works because CESU-8 is especially easy\n        // to convert from UTF-16 (which all JS strings are encoded in).\n        if (charCode < 0x80)\n            buf[bufIdx++] = charCode;\n        else if (charCode < 0x800) {\n            buf[bufIdx++] = 0xC0 + (charCode >>> 6);\n            buf[bufIdx++] = 0x80 + (charCode & 0x3f);\n        }\n        else { // charCode will always be < 0x10000 in javascript.\n            buf[bufIdx++] = 0xE0 + (charCode >>> 12);\n            buf[bufIdx++] = 0x80 + ((charCode >>> 6) & 0x3f);\n            buf[bufIdx++] = 0x80 + (charCode & 0x3f);\n        }\n    }\n    return buf.slice(0, bufIdx);\n}\n\nInternalEncoderCesu8.prototype.end = function() {\n}\n\n//------------------------------------------------------------------------------\n// CESU-8 decoder is not implemented in Node v4.0+\n\nfunction InternalDecoderCesu8(options, codec) {\n    this.acc = 0;\n    this.contBytes = 0;\n    this.accBytes = 0;\n    this.defaultCharUnicode = codec.defaultCharUnicode;\n}\n\nInternalDecoderCesu8.prototype.write = function(buf) {\n    var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, \n        res = '';\n    for (var i = 0; i < buf.length; i++) {\n        var curByte = buf[i];\n        if ((curByte & 0xC0) !== 0x80) { // Leading byte\n            if (contBytes > 0) { // Previous code is invalid\n                res += this.defaultCharUnicode;\n                contBytes = 0;\n            }\n\n            if (curByte < 0x80) { // Single-byte code\n                res += String.fromCharCode(curByte);\n            } else if (curByte < 0xE0) { // Two-byte code\n                acc = curByte & 0x1F;\n                contBytes = 1; accBytes = 1;\n            } else if (curByte < 0xF0) { // Three-byte code\n                acc = curByte & 0x0F;\n                contBytes = 2; accBytes = 1;\n            } else { // Four or more are not supported for CESU-8.\n                res += this.defaultCharUnicode;\n            }\n        } else { // Continuation byte\n            if (contBytes > 0) { // We're waiting for it.\n                acc = (acc << 6) | (curByte & 0x3f);\n                contBytes--; accBytes++;\n                if (contBytes === 0) {\n                    // Check for overlong encoding, but support Modified UTF-8 (encoding NULL as C0 80)\n                    if (accBytes === 2 && acc < 0x80 && acc > 0)\n                        res += this.defaultCharUnicode;\n                    else if (accBytes === 3 && acc < 0x800)\n                        res += this.defaultCharUnicode;\n                    else\n                        // Actually add character.\n                        res += String.fromCharCode(acc);\n                }\n            } else { // Unexpected continuation byte\n                res += this.defaultCharUnicode;\n            }\n        }\n    }\n    this.acc = acc; this.contBytes = contBytes; this.accBytes = accBytes;\n    return res;\n}\n\nInternalDecoderCesu8.prototype.end = function() {\n    var res = 0;\n    if (this.contBytes > 0)\n        res += this.defaultCharUnicode;\n    return res;\n}\n"]},"metadata":{},"sourceType":"script"}