{"ast":null,"code":"/**\r\n * Created by ying.wu on 2017/6/21.\r\n */\nconst helper = require('./helper.js');\n\nconst verify = require('./verification.js');\n\nconst ECpayError = require('./error.js');\n\nconst iconv = require('iconv-lite');\n\nconst crypto = require('crypto');\n\nconst url = require('url');\n\nconst querystring = require('querystring');\n\nconst http = require('http');\n\nconst https = require('https');\n\nclass ECpayQueryClient {\n  constructor() {\n    this.helper = new helper(); // this.verify_query_api = new verify.QueryParamVerify();\n  }\n\n  query_trade_info(parameters) {\n    this._query_base_proc(parameters);\n\n    parameters['TimeStamp'] = (parseInt(this._get_curr_unix_time()) + 120).toString();\n\n    let res = this._query_pos_proc(parameters, 'QueryTradeInfo');\n\n    return res;\n  }\n\n  query_credit_period(parameters) {\n    this._query_base_proc(parameters);\n\n    parameters['TimeStamp'] = (parseInt(this._get_curr_unix_time()) + 120).toString();\n\n    let res = this._query_pos_proc(parameters, 'QueryCreditCardPeriodInfo');\n\n    return res;\n  }\n\n  query_transac_csv(parameters) {\n    this._query_base_proc(parameters);\n\n    delete parameters['PlatformID'];\n\n    let res = this._query_pos_proc(parameters, 'TradeNoAio', true);\n\n    return res;\n  }\n\n  query_credit_single(parameters) {\n    this._query_base_proc(parameters);\n\n    delete parameters['PlatformID'];\n\n    let res = this._query_pos_proc(parameters, 'QueryTradeV2');\n\n    return res;\n  }\n\n  query_credit_csv(parameters) {\n    this._query_base_proc(parameters);\n\n    delete parameters['PlatformID'];\n\n    let res = this._query_pos_proc(parameters, 'FundingReconDetail', true);\n\n    return res;\n  }\n\n  create_server_order(parameters) {\n    this._query_base_proc(parameters);\n\n    let res = this._query_pos_proc(parameters, 'CreateServerOrder');\n\n    return res;\n  }\n\n  _get_curr_unix_time() {\n    return this.helper.get_curr_unixtime();\n  }\n\n  _query_base_proc(params) {\n    if (params.constructor === Object) {\n      // Process PlatformID & MerchantID by contractor setting\n      if (this.helper.is_contractor()) {\n        params['PlatformID'] = this.helper.get_mercid();\n\n        if (params['MerchantID'] === null) {\n          throw new Error(`[MerchantID] should be specified when you're contractor-Platform.`);\n        }\n      } else {\n        params['PlatformID'] = '';\n        params['MerchantID'] = this.helper.get_mercid();\n      }\n    } else {\n      throw new ECpayError.ECpayInvalidParam(`Received parameter object must be a Object.`);\n    }\n  }\n\n  _query_pos_proc(params, apiname, big5_trans = false) {\n    let verify_query_api = new verify.QueryParamVerify(apiname);\n    verify_query_api.verify_query_param(params);\n    let exclusive_list = [];\n\n    if (apiname === 'CreateServerOrder') {\n      exclusive_list = ['PaymentToken'];\n    } // for PaymentToken\n\n\n    let exclusive_ele = {};\n    exclusive_list.forEach(function (param) {\n      exclusive_ele[param] = params[param];\n      delete params[param];\n    }); // encode special param\n    // Insert chkmacval\n\n    console.log(params);\n    let chkmac = this.helper.gen_chk_mac_value(params);\n    params['CheckMacValue'] = chkmac;\n    let helper = this.helper;\n    exclusive_list.forEach(function (param) {\n      let paymenttoken = helper.gen_aes_encrypt(exclusive_ele);\n      params[param] = paymenttoken;\n    });\n    console.log(params); // gen post html\n\n    let api_url = verify_query_api.get_svc_url(apiname, this.helper.get_op_mode()); // post from server\n\n    let resp = this.helper.http_request('POST', api_url, params);\n    return new Promise((resolve, reject) => {\n      resp.then(function (result) {\n        if (big5_trans) {\n          return resolve(iconv.decode(Buffer.concat(result), 'big5'));\n        } else {\n          return resolve(iconv.decode(Buffer.concat(result), 'utf-8'));\n        }\n      }).catch(function (err) {\n        reject(err);\n      });\n    });\n  }\n\n}\n\nmodule.exports = ECpayQueryClient;","map":{"version":3,"sources":["/Users/Cooper/Bluxury_Catering/bluxury-catering copy 4/src/ecpay_payment_nodejs/lib/ecpay_payment/query_client.js"],"names":["helper","require","verify","ECpayError","iconv","crypto","url","querystring","http","https","ECpayQueryClient","constructor","query_trade_info","parameters","_query_base_proc","parseInt","_get_curr_unix_time","toString","res","_query_pos_proc","query_credit_period","query_transac_csv","query_credit_single","query_credit_csv","create_server_order","get_curr_unixtime","params","Object","is_contractor","get_mercid","Error","ECpayInvalidParam","apiname","big5_trans","verify_query_api","QueryParamVerify","verify_query_param","exclusive_list","exclusive_ele","forEach","param","console","log","chkmac","gen_chk_mac_value","paymenttoken","gen_aes_encrypt","api_url","get_svc_url","get_op_mode","resp","http_request","Promise","resolve","reject","then","result","decode","Buffer","concat","catch","err","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * Created by ying.wu on 2017/6/21.\r\n */\r\nconst helper = require('./helper.js');\r\nconst verify = require('./verification.js');\r\nconst ECpayError = require('./error.js');\r\nconst iconv =require('iconv-lite');\r\nconst crypto = require('crypto');\r\nconst url = require('url');\r\nconst querystring = require('querystring');\r\nconst http = require('http');\r\nconst https = require('https');\r\n\r\nclass ECpayQueryClient{\r\n    constructor(){\r\n        this.helper = new helper();\r\n        // this.verify_query_api = new verify.QueryParamVerify();\r\n    }\r\n\r\n    query_trade_info(parameters){\r\n        this._query_base_proc(parameters);\r\n        parameters['TimeStamp'] = (parseInt(this._get_curr_unix_time()) + 120).toString();\r\n        let res = this._query_pos_proc(parameters, 'QueryTradeInfo');\r\n        return res;\r\n    }\r\n\r\n    query_credit_period(parameters){\r\n        this._query_base_proc(parameters);\r\n        parameters['TimeStamp'] = (parseInt(this._get_curr_unix_time()) + 120).toString();\r\n        let res = this._query_pos_proc(parameters, 'QueryCreditCardPeriodInfo');\r\n        return res;\r\n    }\r\n\r\n    query_transac_csv(parameters){\r\n        this._query_base_proc(parameters);\r\n        delete parameters['PlatformID'];\r\n        let res = this._query_pos_proc(parameters, 'TradeNoAio', true);\r\n        return res;\r\n    }\r\n\r\n    query_credit_single(parameters){\r\n        this._query_base_proc(parameters);\r\n        delete parameters['PlatformID'];\r\n        let res = this._query_pos_proc(parameters, 'QueryTradeV2');\r\n        return res;\r\n    }\r\n\r\n    query_credit_csv(parameters){\r\n        this._query_base_proc(parameters);\r\n        delete parameters['PlatformID'];\r\n        let res = this._query_pos_proc(parameters, 'FundingReconDetail', true);\r\n        return res;\r\n    }\r\n\r\n    create_server_order(parameters){\r\n        this._query_base_proc(parameters);\r\n        let res = this._query_pos_proc(parameters, 'CreateServerOrder');\r\n        return res;\r\n    }\r\n\r\n    _get_curr_unix_time(){\r\n        return this.helper.get_curr_unixtime();\r\n    }\r\n\r\n    _query_base_proc(params){\r\n        if (params.constructor === Object){\r\n\r\n            // Process PlatformID & MerchantID by contractor setting\r\n            if (this.helper.is_contractor()){\r\n                params['PlatformID'] = this.helper.get_mercid();\r\n                if (params['MerchantID'] === null){\r\n                    throw new Error(`[MerchantID] should be specified when you're contractor-Platform.`);\r\n                }\r\n            } else {\r\n                params['PlatformID'] = '';\r\n                params['MerchantID'] = this.helper.get_mercid();\r\n            }\r\n        } else {\r\n            throw new ECpayError.ECpayInvalidParam(`Received parameter object must be a Object.`);\r\n        }\r\n    }\r\n\r\n    _query_pos_proc(params, apiname , big5_trans=false){\r\n        let verify_query_api = new verify.QueryParamVerify(apiname);\r\n        verify_query_api.verify_query_param(params);\r\n        let exclusive_list = [];\r\n        if (apiname === 'CreateServerOrder'){\r\n            exclusive_list = ['PaymentToken'];\r\n        }\r\n        // for PaymentToken\r\n        let exclusive_ele = {};\r\n        exclusive_list.forEach(function (param) {\r\n           exclusive_ele[param] = params[param];\r\n           delete params[param];\r\n        });\r\n        // encode special param\r\n        // Insert chkmacval\r\n        console.log(params);\r\n        let chkmac = this.helper.gen_chk_mac_value(params);\r\n        params['CheckMacValue'] = chkmac;\r\n\r\n        let helper = this.helper;\r\n        exclusive_list.forEach(function (param) {\r\n           let paymenttoken = helper.gen_aes_encrypt(exclusive_ele);\r\n           params[param] = paymenttoken;\r\n        });\r\n        console.log(params);\r\n\r\n        // gen post html\r\n        let api_url = verify_query_api.get_svc_url(apiname, this.helper.get_op_mode());\r\n        // post from server\r\n        let resp = this.helper.http_request('POST', api_url, params);\r\n        return new Promise((resolve, reject) => {\r\n            resp.then(function (result) {\r\n                    if (big5_trans) {\r\n                        return resolve(iconv.decode(Buffer.concat(result), 'big5'));\r\n                    } else {\r\n                        return resolve(iconv.decode(Buffer.concat(result), 'utf-8'));\r\n                    }\r\n\r\n            }).catch(function (err) {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n}\r\nmodule.exports = ECpayQueryClient;"]},"metadata":{},"sourceType":"module"}