{"ast":null,"code":"/**\r\n * Created by ying.wu on 2017/6/12.\r\n */\nconst ECpayError = require('./error.js');\n\nconst fs = require('fs');\n\nconst et = require('elementtree');\n\nclass PaymentVerifyBase {\n  constructor() {\n    this.param_xml_file = fs.readFileSync(__dirname + '/../../lib/ecpay_payment/ECpayPayment.xml').toString();\n    this.param_xml = et.parse(this.param_xml_file);\n  }\n\n  get_svc_url(apiname, mode) {\n    let url = this.param_xml.findtext(`./${apiname}/ServiceAddress/url[@type=\\\"${mode}\\\"]`);\n    return url;\n  }\n\n  get_special_encode_param(apiname) {\n    let ret = [];\n    let node = this.param_xml.findall(`./${apiname}/Parameters//param[@urlencode=\\\"1\\\"]`); // console.log(node);\n\n    node.forEach(function (elem) {\n      // console.log(elem.attrib.name);\n      ret.push(elem.attrib.name);\n    });\n    return ret;\n  }\n\n  get_basic_params(apiname) {\n    let basic_param = [];\n    this.param_xml.findall(`./${apiname}/Parameters/param[@require=\\\"1\\\"]`).forEach(function (elem) {\n      // console.log(elem.attrib.name);\n      basic_param.push(elem.attrib.name);\n    });\n    return basic_param;\n  }\n\n  get_cond_param(apiname) {\n    let aio_sw_param = [];\n    let conditional_param = {};\n    this.param_xml.findall(`./${apiname}/Config/switchparam/n`).forEach(function (elem) {\n      // console.log(elem.text);\n      aio_sw_param.push(elem.text);\n    });\n    let param_xml = this.param_xml;\n    aio_sw_param.forEach(function (pname) {\n      let opt_param = {};\n      let node = param_xml.findall(`./${apiname}/Parameters//param[@name=\\\"${pname}\\\"]/condparam`);\n      node.forEach(function (elem) {\n        let opt = elem.attrib.owner;\n        let params = [];\n        param_xml.findall(`./${apiname}/Parameters//param[@name=\\\"${pname}\\\"]//condparam[@owner=\\\"${opt}\\\"]/param[@require=\"1\"]`).forEach(function (pa) {\n          params.push(pa.attrib.name);\n        });\n        opt_param[opt] = params;\n      });\n      conditional_param[pname] = opt_param;\n    });\n    return conditional_param;\n  }\n\n  get_param_type(apiname) {\n    let param_type = {};\n    this.param_xml.findall(`./${apiname}/Parameters//param`).forEach(function (elem) {\n      param_type[elem.attrib.name] = elem.attrib.type;\n    });\n    return param_type;\n  }\n\n  get_opt_param_pattern(apiname) {\n    let pattern = {};\n    let temp_arr = [];\n    let param_xml = this.param_xml;\n    let node = this.param_xml.findall(`./${apiname}/Parameters//param[@type=\\\"Opt\\\"]`);\n    node.forEach(function (param_elem) {\n      temp_arr.push(param_elem.attrib.name);\n    }); // console.log(temp_arr);\n\n    temp_arr.forEach(function (opt_params) {\n      // console.log(opt_params);\n      let opt_elems = param_xml.findall(`./${apiname}/Parameters//param[@name=\\\"${opt_params}\\\"]//option`); // console.log(opt_elems);\n\n      let opt = [];\n      opt_elems.forEach(function (oe) {\n        opt.push(oe.text);\n      }); // console.log(opt);\n\n      pattern[opt_params] = opt;\n    });\n\n    if (apiname === 'AioCheckOut') {\n      pattern['ChoosePayment'].splice(3, 13);\n    } // console.log(pattern);\n\n\n    return pattern;\n  }\n\n  get_int_param_pattern(apiname) {\n    let pattern = {};\n    let temp_arr = [];\n    let param_xml = this.param_xml;\n    let node = this.param_xml.findall(`./${apiname}/Parameters//param[@type=\\\"Int\\\"]`);\n    node.forEach(function (param_elem) {\n      temp_arr.push(param_elem.attrib.name);\n    }); // console.log(temp_arr);\n\n    temp_arr.forEach(function (opt_params) {\n      // console.log(opt_params);\n      let mode = param_xml.findall(`./${apiname}/Parameters//param[@name=\\\"${opt_params}\\\"]//mode`);\n      let mx = param_xml.findall(`./${apiname}/Parameters//param[@name=\\\"${opt_params}\\\"]//maximum`);\n      let mn = param_xml.findall(`./${apiname}/Parameters//param[@name=\\\"${opt_params}\\\"]//minimal`); // console.log(mode);\n\n      let arr = [];\n      mode.forEach(function (md) {\n        arr.push(md.text);\n      });\n      mx.forEach(function (mx) {\n        arr.push(mx.text);\n      });\n      mn.forEach(function (mn) {\n        arr.push(mn.text);\n      }); // console.log(arr);\n\n      pattern[opt_params] = arr;\n    });\n\n    if (apiname === 'AioCheckOut') {\n      pattern['StoreExpireDate'].splice(1, 2);\n      pattern['StoreExpireDate'].splice(2, 1);\n    } // console.log(pattern);\n\n\n    return pattern;\n  }\n\n  get_str_param_pattern(apiname) {\n    let pattern = {};\n    let temp_arr = [];\n    let param_xml = this.param_xml;\n    let node = this.param_xml.findall(`./${apiname}/Parameters//param[@type=\\\"String\\\"]`);\n    node.forEach(function (param_elem) {\n      temp_arr.push(param_elem.attrib.name);\n    }); // console.log(temp_arr);\n\n    temp_arr.forEach(function (opt_params) {\n      // console.log(opt_params);\n      let pat_elems = param_xml.findall(`./${apiname}/Parameters//param[@name=\\\"${opt_params}\\\"]//pattern`);\n      let arr = [];\n      pat_elems.forEach(function (pa) {\n        arr.push(pa.text);\n      }); // console.log(arr);\n\n      pattern[opt_params] = arr.toString();\n    });\n\n    if (apiname === 'AioCheckOut') {\n      pattern['InvoiceMark'] = '';\n      pattern['PaymentInfoURL'] = pattern['PaymentInfoURL'].slice(11, 21);\n      pattern['ClientRedirectURL'] = pattern['ClientRedirectURL'].slice(11, 21);\n      pattern['Desc_1'] = pattern['Desc_1'].slice(10, 20);\n      pattern['Desc_2'] = pattern['Desc_2'].slice(10, 20);\n      pattern['Desc_3'] = pattern['Desc_3'].slice(10, 20);\n      pattern['Desc_4'] = pattern['Desc_4'].slice(10, 20);\n    } // console.log(pattern);\n\n\n    return pattern;\n  }\n\n  get_depopt_param_pattern(apiname) {\n    let pattern = {};\n    let param_xml = this.param_xml;\n    let p_name, parent_name;\n    let k, get_opts;\n    let k_opts = [];\n    let sub_opts = {};\n    let parent_n_opts = {};\n    let node = this.param_xml.findall(`./${apiname}/Parameters//param[@type=\\\"DepOpt\\\"]`);\n    node.forEach(function (param_elem) {\n      p_name = param_elem.attrib.name;\n      parent_name = param_elem.attrib.main;\n    });\n    k = this.param_xml.findall(`./${apiname}/Parameters//param[@name=\\\"${p_name}\\\"]//mainoption`);\n    k.forEach(function (elem) {\n      k_opts.push(elem.attrib.name);\n    });\n    k_opts.forEach(function (elem) {\n      get_opts = param_xml.findall(`./${apiname}/Parameters//mainoption[@name=\\\"${elem}\\\"]//option`);\n      let opt = [];\n      get_opts.forEach(function (c) {\n        opt.push(c.text);\n        sub_opts[elem] = opt;\n      });\n    }); // console.log(sub_opts);\n\n    parent_n_opts[parent_name] = sub_opts; // console.log(parent_n_opts);\n\n    pattern[p_name] = parent_n_opts; // console.log(pattern['ChooseSubPayment']['ChoosePayment']['BARCODE']);\n\n    return pattern;\n  }\n\n  get_all_pattern(apiname) {\n    let res = {};\n    res['Type_idx'] = this.get_param_type(apiname);\n    res['Int'] = this.get_int_param_pattern(apiname);\n    res['String'] = this.get_str_param_pattern(apiname);\n    res['Opt'] = this.get_opt_param_pattern(apiname);\n    res['DepOpt'] = this.get_depopt_param_pattern(apiname);\n    return res;\n  }\n\n  verify_param_by_pattern(params, pattern) {\n    // console.log(params);\n    // console.log(pattern);\n    let type_index = pattern['Type_idx']; // console.log(type_index);\n\n    Object.keys(params).forEach(function (p_name) {\n      // console.log(p_name);\n      let p_type = type_index[p_name]; // console.log(p_type);\n\n      let patt_container = pattern[p_type]; // console.log(patt_container);\n\n      switch (p_type) {\n        case 'String':\n          let regex_patt = patt_container[p_name];\n          let mat = params[p_name].match(new RegExp(regex_patt));\n\n          if (mat === null) {\n            throw new ECpayError.ECpayInvalidParam(`Wrong format of param ${p_name} or length exceeded.`);\n          }\n\n          break;\n\n        case 'Opt':\n          let aval_opt = patt_container[p_name];\n          let mat_opt = aval_opt.includes(params[p_name]);\n\n          if (mat_opt === false) {\n            throw new ECpayError.ECpayInvalidParam(`Unexpected option of param ${p_name} (${params[p_name]}). Available option: (${aval_opt}).`);\n          }\n\n          break;\n\n        case 'Int':\n          let criteria = patt_container[p_name]; // console.log('criteria: '+ criteria);\n\n          let mode = criteria[0];\n          let max = parseInt(criteria[1]);\n          let min = parseInt(criteria[2]);\n          let val = parseInt(params[p_name]); // console.log('mode: '+ mode);\n          // console.log('max: '+  max);\n          // console.log('min: '+  min);\n          // console.log('val: '+  val);\n\n          switch (mode) {\n            case 'BETWEEN':\n              if (val < min || val > max) {\n                throw new ECpayError.ECpayInvalidParam(`Value of ${p_name} should be between ${min} and ${max}.`);\n              }\n\n              break;\n\n            case 'GE':\n              if (val < min) {\n                throw new ECpayError.ECpayInvalidParam(`Value of ${p_name} should be greater than or equal to ${min}.`);\n              }\n\n              break;\n\n            case 'LE':\n              if (val > max) {\n                throw new ECpayError.ECpayInvalidParam(`Value of ${p_name} should be less than or equal to ${max}.`);\n              }\n\n              break;\n\n            case 'EXCLUDE':\n              if (val >= max && val <= max) {\n                throw new ECpayError.ECpayInvalidParam(`Value of ${p_name} can NOT be between ${min} and ${max}..`);\n              }\n\n              break;\n\n            default:\n              throw new ECpayError.ECpayInvalidParam(`Unexpected integer verification mode for parameter ${p_name}: ${mode}.`);\n          }\n\n          break;\n\n        case 'DepOpt':\n          let dep_opt = patt_container[p_name];\n          let parent_param = Object.keys(dep_opt)[0];\n          let all_dep_opt = dep_opt[parent_param];\n          let parent_val = params[parent_param];\n          let aval_dopt = all_dep_opt[parent_val];\n\n          if (aval_dopt === null && pattern['Opt'][parent_param].includes(parent_val) === false) {\n            throw new ECpayError.ECpayInvalidParam(`Cannot find available option of [${p_name}] by related param [${parent_param}](Value: ${parent_val}.`);\n          } else if (aval_dopt.constructor === Array) {\n            if (!aval_dopt.includes(params[p_name])) {\n              throw new ECpayError.ECpayInvalidParam(`Unexpected option of param ${p_name} (${params[p_name]}). Available option: (${aval_dopt}).`);\n            }\n          }\n\n          break;\n\n        default:\n          throw new Error(`Unexpected type (${p_type}) for parameter ${p_name}.`);\n      }\n    });\n  }\n\n}\n\nclass AioCheckOutParamVerify extends PaymentVerifyBase {\n  constructor() {\n    super();\n    this.aio_basic_param = this.get_basic_params('AioCheckOut');\n    this.aio_conditional_param = this.get_cond_param('AioCheckOut');\n    this.all_param_pattern = this.get_all_pattern('AioCheckOut');\n  }\n\n  get_serialized_data() {\n    console.log(this.aio_basic_param);\n    console.log('-----');\n    console.log(this.aio_conditional_param);\n    let new_di = this.aio_conditional_param;\n    delete new_di['InvoiceMark'];\n    console.log(this.aio_conditional_param);\n    console.log('-----');\n    console.log(new_di);\n  }\n\n  verify_aio_payment_param(params) {\n    if (params.constructor === Object) {\n      // Force specify => DeviceSource, IgnorePayment, PlatformID, EncryptType\n      let fix_params = {\n        DeviceSource: '',\n        // PlatformID: '',\n        EncryptType: '1',\n        PaymentType: 'aio'\n      };\n      Object.assign(params, fix_params); // Verify Basic param requirement\n      // if (params === {}){\n      //     throw new ECpayError.ECpayInvalidParam(`Parameter object is empty.`);\n      // }\n\n      let basic_param = this.aio_basic_param.sort();\n      let input_param = Object.keys(params).sort();\n      basic_param.forEach(function (pname) {\n        if (input_param.indexOf(pname, 0) === -1) {\n          throw new ECpayError.ECpayInvalidParam(`Lack required param ${pname}`);\n        }\n      }); // Verify Extend param requirement\n\n      let ext_param = this.aio_conditional_param;\n      delete ext_param['InvoiceMark'];\n      Object.keys(ext_param).forEach(function (pa) {\n        let val = params[pa];\n        let related_required_param = ext_param[pa][val];\n\n        if (related_required_param !== undefined && related_required_param !== []) {\n          related_required_param.forEach(function (e) {\n            if (!Object.keys(params).includes(e)) {\n              throw new ECpayError.ECpayInvalidParam(`Lack required parameter [${e}] when [${pa}] is set to [${val}].`);\n            }\n          });\n        }\n      }); // Verify Value pattern of each param\n\n      this.verify_param_by_pattern(params, this.all_param_pattern);\n    } else {\n      throw new TypeError(`Received argument is not a Object.`);\n    }\n  }\n\n  verify_aio_inv_param(params) {\n    if (params.constructor === Object) {\n      // 發票所有參數預設要全帶\n      Object.keys(params).forEach(function (keys) {\n        if (params[keys] === null) {\n          throw new ECpayError.ECpayInvalidParam(`Parameter value cannot be null.`);\n        }\n      }); // 1. 比對欄位是否缺乏\n\n      let inv_param = this.aio_conditional_param['InvoiceMark']['Y'];\n      let input_param = Object.keys(params);\n      inv_param.forEach(function (pname) {\n        if (input_param.indexOf(pname, 0) === -1) {\n          throw new ECpayError.ECpayInvalidParam(`Lack required invoice param ${pname}`);\n        }\n      });\n      input_param.forEach(function (pname) {\n        if (inv_param.indexOf(pname, 0) === -1) {\n          throw new ECpayError.ECpayInvalidParam(`Unexpected parameter in Invoice parameters ${pname}`);\n        }\n      }); // let inv_param_names = this.aio_conditional_param['InvoiceMark']['Y'];\n      // let param_diff = inv_param_names - Object.keys(params);\n      // if (param_diff !== []){\n      //     throw new ECpayError.ECpayInvalidParam(`Lack required invoice param ${param_diff}`);\n      // }\n      // let unexp_param = Object.keys(params) - inv_param_names;\n      // if (unexp_param !== []){\n      //     throw new ECpayError.ECpayInvalidParam(`Unexpected parameter in Invoice parameters ${unexp_param}`);\n      // }\n      // 2. 比對特殊欄位值相依需求\n      // a [CarruerType]為1 => CustomerID 不能為空\n\n      if (params['CarruerType'] === '1') {\n        if (params['CustomerID'] === '') {\n          throw new ECpayError.ECpayInvoiceRuleViolate(`[CustomerID] can not be empty when [CarruryType] is 1.`);\n        }\n      } // [CustomerID]不為空 => CarruerType 不能為空\n      else if (params['CarruerType'] === '') {\n          if (params['CustomerID'] !== '') {\n            throw new ECpayError.ECpayInvoiceRuleViolate(`[CarruerType] can not be empty when [CustomerID] is not empty.`);\n          }\n        } // b 列印註記[Print]為1 => CustomerName, CustomerAddr 不能為空\n\n\n      if (params['Print'] === '1') {\n        if (params['CustomerName'] === '' && params['CustomerAddr'] === '') {\n          throw new ECpayError.ECpayInvoiceRuleViolate(`[CustomerName] and [CustomerAddr] can not be empty when [Print] is 1.`);\n        }\n\n        if (params['CustomerID'] !== '') {\n          throw new ECpayError.ECpayInvoiceRuleViolate(`[Print] can not be '1' when [CustomerID] is not empty.`);\n        }\n      } // c CustomerPhone和CustomerEmail至少一個要有值\n\n\n      if (params['CustomerPhone'] === '' && params['CustomerEmail'] === '') {\n        throw new ECpayError.ECpayInvoiceRuleViolate(`[CustomerPhone] and [CustomerEmail] can not both be empty.`);\n      } // d 別[TaxType]為2 => ClearanceMark = 1 or 2 and InvoiceItemTaxType must include '2'\n\n\n      if (params['TaxType'] === '2') {\n        if (params['ClearanceMark'] !== '1' && params['ClearanceMark'] !== '2') {\n          throw new ECpayError.ECpayInvoiceRuleViolate(`[ClearanceMark] has to be 1 or 2 when [TaxType] is 2.`);\n        }\n\n        if (!params['InvoiceItemTaxType'].includes('2')) {\n          throw new ECpayError.ECpayInvoiceRuleViolate(`[InvoiceItemTaxType] must contain at lease one '2' when [TaxType] is 2.`);\n        }\n      } // e 統一編號[CustomerIdentifier]有值時 => CarruerType != 1 or 2, Donation = 0, Print = 1\n\n\n      if (params['CustomerIdentifier'] !== '') {\n        if (params['CarruerType'] === '1' || params['CarruerType'] === '2') {\n          throw new ECpayError.ECpayInvoiceRuleViolate(`[CarruerType] Cannot be 1 or 2 when [CustomerIdentifier] is given.`);\n        }\n      } // [CarruerType]為'' or 1 時 : CarruerNum = '', [CarruerType]為2, CarruerNum = 固定長度為16且格式為2碼大小寫字母加上14碼數字。\n      // [CarruerType]為3, 固定長度為8且格式為1碼斜線「/」加上7碼數字及大小寫字母組成\n\n\n      if (params['CarruerType'] === '' || params['CarruerType'] === '1') {\n        if (params['CarruerNum'] !== '') {\n          throw new ECpayError.ECpayInvoiceRuleViolate(`[CarruerNum] must be empty when [CarruerType] is empty or 1.`);\n        }\n      } else if (params['CarruerType'] === '2') {\n        if (params['CarruerNum'].match(new RegExp(/[A-Za-z]{2}[0-9]{14}/)) === null) {\n          throw new ECpayError.ECpayInvoiceRuleViolate(`[CarruerNum] must be 2 alphabets and 14 numbers when [CarruerType] is 2.`);\n        }\n      } else if (params['CarruerType'] === '3') {\n        if (params['CarruerNum'].match(new RegExp(/^\\/[A-Za-z0-9\\s+-]{7}$/)) === null) {\n          throw new ECpayError.ECpayInvoiceRuleViolate(`[CarruerNum] must start with '/' followed by 7 alphabet and number characters when [CarruerType] is 3.`);\n        }\n      } else {\n        throw new ECpayError.ECpayInvoiceRuleViolate(`Unexpected value in [CarruerType].`);\n      } // [CarruerType]有值時，Print必須有為0\n\n\n      if (params['CarruerType'] !== '' && params['Print'] !== '0') {\n        throw new ECpayError.ECpayInvoiceRuleViolate(`[Print] must be 0 when [CarruerType] has value.`);\n      } // Donation = 1 => LoveCode不能為空, Print = 0\n\n\n      if (params['Donation'] === '1') {\n        if (params['LoveCode'] === '') {\n          throw new ECpayError.ECpayInvoiceRuleViolate(`[LoveCode] cannot be empty when [Donation] is 1.`);\n        }\n\n        if (params['Print'] !== '0') {\n          throw new ECpayError.ECpayInvoiceRuleViolate(`[Print] must be 0 when [Donation] is 1.`);\n        }\n      } // 3. 比對商品名稱，數量，單位，價格，tax項目數量是否一致\n\n\n      let item_params = ['InvoiceItemCount', 'InvoiceItemWord', 'InvoiceItemPrice', 'InvoiceItemTaxType']; // 商品名稱含有管線 => 認為是多樣商品 *InvoiceItemName, *InvoiceItemCount, *InvoiceItemWord, *InvoiceItemPrice, *InvoiceItemTaxType逐一用管線分割，計算數量後與第一個比對\n\n      if (params['InvoiceItemName'] === '') {\n        throw new ECpayError.ECpayInvoiceRuleViolate(`[InvoiceItemName] is empty.`);\n      } else {\n        if (params['InvoiceItemName'].includes('|')) {\n          let item_cnt = params['InvoiceItemName'].split('|').length;\n          item_params.forEach(function (param_name) {\n            // Check if there's empty value.\n            if (params[param_name].match(new RegExp(/(\\|\\||^\\||\\|$)/)) !== null) {\n              throw new ECpayError.ECpayInvoiceRuleViolate(`[${param_name}] contains empty value.`);\n            }\n\n            let p_cnt = params[param_name].split('|').length;\n\n            if (item_cnt !== p_cnt) {\n              throw new ECpayError.ECpayInvoiceRuleViolate(`Count of item info [${param_name}] (${p_cnt}) not match count from [InvoiceItemName] (${item_cnt}).`);\n            }\n          }); // 課稅類別[TaxType] = 9時 => InvoiceItemTaxType 能含有1,2,3(and at least contains one 1 and other)\n\n          let item_tax = params['InvoiceItemTaxType'].split('|');\n          let aval_tax_type = ['1', '2', '3'];\n          let vio_tax_t = item_tax - aval_tax_type;\n\n          if (vio_tax_t === []) {\n            throw new ECpayError.ECpayInvoiceRuleViolate(`Illegal [InvoiceItemTaxType]: ${vio_tax_t}`);\n          }\n\n          if (params['TaxType'] === '9') {\n            if (!item_tax.includes('1')) {\n              throw new ECpayError.ECpayInvoiceRuleViolate(`[InvoiceItemTaxType] must contain at lease one '1'.`);\n            }\n\n            if (item_tax.includes('2') && item_tax.includes('3')) {\n              throw new ECpayError.ECpayInvoiceRuleViolate(`[InvoiceItemTaxType] cannot contain 2 and 3 at the same time.`);\n            }\n          }\n        } else {\n          // 沒有管線 => 逐一檢查後4項有無管線\n          item_params.forEach(function (param_name) {\n            if (params[param_name].includes('|')) {\n              throw new ECpayError.ECpayInvoiceRuleViolate(`Item info [${param_name}] contain pipeline delimiter but there's only one item in param [InvoiceItemName].`);\n            }\n          });\n        }\n      } // 4. 比對所有欄位Pattern\n\n\n      this.verify_param_by_pattern(params, this.all_param_pattern);\n    } else {\n      throw TypeError(`Received argument is not a object.`);\n    }\n  }\n\n}\n\nclass QueryParamVerify extends PaymentVerifyBase {\n  constructor(apiname) {\n    super();\n    this.aio_basic_param = this.get_basic_params(apiname);\n    this.aio_conditional_param = this.get_cond_param(apiname);\n    this.all_param_pattern = this.get_all_pattern(apiname);\n  }\n\n  verify_query_param(params) {\n    if (params.constructor === Object) {\n      let basic_param = this.aio_basic_param.sort();\n      let input_param = Object.keys(params).sort();\n      basic_param.forEach(function (pname) {\n        if (input_param.indexOf(pname, 0) === -1) {\n          throw new ECpayError.ECpayInvalidParam(`Lack required param ${pname}`);\n        }\n      }); // Verify Value pattern of each param\n\n      this.verify_param_by_pattern(params, this.all_param_pattern);\n    } else {\n      throw new TypeError(`Received argument is not a object`);\n    }\n  }\n\n}\n\nclass ActParamVerify extends PaymentVerifyBase {\n  constructor(apiname) {\n    super();\n    this.aio_basic_param = this.get_basic_params(apiname);\n    this.aio_conditional_param = this.get_cond_param(apiname);\n    this.all_param_pattern = this.get_all_pattern(apiname);\n  }\n\n  verify_act_param(params) {\n    if (params.constructor === Object) {\n      let basic_param = this.aio_basic_param.sort();\n      let input_param = Object.keys(params).sort();\n      basic_param.forEach(function (pname) {\n        if (input_param.indexOf(pname, 0) === -1) {\n          throw new ECpayError.ECpayInvalidParam(`Lack required param ${pname}`);\n        }\n      }); // Verify Value pattern of each param\n\n      this.verify_param_by_pattern(params, this.all_param_pattern);\n    } else {\n      throw new TypeError(`Received argument is not a object`);\n    }\n  }\n\n}\n\nmodule.exports = {\n  PaymentVerifyBase: PaymentVerifyBase,\n  AioCheckOutParamVerify: AioCheckOutParamVerify,\n  QueryParamVerify: QueryParamVerify,\n  ActParamVerify: ActParamVerify\n};","map":{"version":3,"sources":["/Users/Cooper/Bluxury_Catering/bluxury-catering copy 3/node_modules/ecpay-payment/lib/ecpay_payment/verification.js"],"names":["ECpayError","require","fs","et","PaymentVerifyBase","constructor","param_xml_file","readFileSync","__dirname","toString","param_xml","parse","get_svc_url","apiname","mode","url","findtext","get_special_encode_param","ret","node","findall","forEach","elem","push","attrib","name","get_basic_params","basic_param","get_cond_param","aio_sw_param","conditional_param","text","pname","opt_param","opt","owner","params","pa","get_param_type","param_type","type","get_opt_param_pattern","pattern","temp_arr","param_elem","opt_params","opt_elems","oe","splice","get_int_param_pattern","mx","mn","arr","md","get_str_param_pattern","pat_elems","slice","get_depopt_param_pattern","p_name","parent_name","k","get_opts","k_opts","sub_opts","parent_n_opts","main","c","get_all_pattern","res","verify_param_by_pattern","type_index","Object","keys","p_type","patt_container","regex_patt","mat","match","RegExp","ECpayInvalidParam","aval_opt","mat_opt","includes","criteria","max","parseInt","min","val","dep_opt","parent_param","all_dep_opt","parent_val","aval_dopt","Array","Error","AioCheckOutParamVerify","aio_basic_param","aio_conditional_param","all_param_pattern","get_serialized_data","console","log","new_di","verify_aio_payment_param","fix_params","DeviceSource","EncryptType","PaymentType","assign","sort","input_param","indexOf","ext_param","related_required_param","undefined","e","TypeError","verify_aio_inv_param","inv_param","ECpayInvoiceRuleViolate","item_params","item_cnt","split","length","param_name","p_cnt","item_tax","aval_tax_type","vio_tax_t","QueryParamVerify","verify_query_param","ActParamVerify","verify_act_param","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * Created by ying.wu on 2017/6/12.\r\n */\r\nconst ECpayError = require('./error.js');\r\nconst fs = require('fs');\r\nconst et = require('elementtree');\r\n\r\nclass PaymentVerifyBase{\r\n    constructor(){\r\n        this.param_xml_file = fs.readFileSync(__dirname + '/../../lib/ecpay_payment/ECpayPayment.xml').toString();\r\n        this.param_xml = et.parse(this.param_xml_file);\r\n    }\r\n\r\n    get_svc_url(apiname, mode){\r\n        let url = this.param_xml.findtext(`./${apiname}/ServiceAddress/url[@type=\\\"${mode}\\\"]`);\r\n        return url;\r\n    }\r\n\r\n    get_special_encode_param(apiname){\r\n        let ret = [];\r\n        let node = this.param_xml.findall(`./${apiname}/Parameters//param[@urlencode=\\\"1\\\"]`);\r\n        // console.log(node);\r\n        node.forEach(function (elem) {\r\n            // console.log(elem.attrib.name);\r\n            ret.push(elem.attrib.name);\r\n        });\r\n        return ret;\r\n    }\r\n\r\n    get_basic_params(apiname){\r\n        let basic_param = [];\r\n        this.param_xml.findall(`./${apiname}/Parameters/param[@require=\\\"1\\\"]`).forEach(function (elem) {\r\n           // console.log(elem.attrib.name);\r\n           basic_param.push(elem.attrib.name);\r\n        });\r\n        return basic_param;\r\n    }\r\n\r\n    get_cond_param(apiname){\r\n        let aio_sw_param = [];\r\n        let conditional_param = {};\r\n        this.param_xml.findall(`./${apiname}/Config/switchparam/n`).forEach(function (elem) {\r\n           // console.log(elem.text);\r\n           aio_sw_param.push(elem.text);\r\n        });\r\n        let param_xml = this.param_xml;\r\n        aio_sw_param.forEach(function (pname) {\r\n            let opt_param = {};\r\n            let node = param_xml.findall(`./${apiname}/Parameters//param[@name=\\\"${pname}\\\"]/condparam`);\r\n            node.forEach(function (elem) {\r\n               let opt = elem.attrib.owner;\r\n               let params = [];\r\n               param_xml.findall(`./${apiname}/Parameters//param[@name=\\\"${pname}\\\"]//condparam[@owner=\\\"${opt}\\\"]/param[@require=\"1\"]`).forEach(function (pa) {\r\n                  params.push(pa.attrib.name);\r\n               });\r\n               opt_param[opt] = params;\r\n            });\r\n            conditional_param[pname] = opt_param;\r\n        });\r\n        return conditional_param;\r\n    }\r\n\r\n    get_param_type(apiname){\r\n        let param_type ={};\r\n        this.param_xml.findall(`./${apiname}/Parameters//param`).forEach(function (elem) {\r\n           param_type[elem.attrib.name] = elem.attrib.type;\r\n        });\r\n        return param_type;\r\n    }\r\n\r\n    get_opt_param_pattern(apiname){\r\n        let pattern = {};\r\n        let temp_arr = [];\r\n        let param_xml = this.param_xml;\r\n        let node = this.param_xml.findall(`./${apiname}/Parameters//param[@type=\\\"Opt\\\"]`);\r\n        node.forEach(function (param_elem) {\r\n            temp_arr.push(param_elem.attrib.name);\r\n        });\r\n        // console.log(temp_arr);\r\n        temp_arr.forEach(function (opt_params) {\r\n            // console.log(opt_params);\r\n            let opt_elems = param_xml.findall(`./${apiname}/Parameters//param[@name=\\\"${opt_params}\\\"]//option`);\r\n            // console.log(opt_elems);\r\n            let opt = [];\r\n            opt_elems.forEach(function (oe) {opt.push(oe.text);});\r\n            // console.log(opt);\r\n            pattern[opt_params] = opt;\r\n        });\r\n        if (apiname === 'AioCheckOut'){\r\n            pattern['ChoosePayment'].splice(3, 13);\r\n        }\r\n        // console.log(pattern);\r\n        return pattern;\r\n    }\r\n\r\n    get_int_param_pattern(apiname){\r\n        let pattern = {};\r\n        let temp_arr = [];\r\n        let param_xml = this.param_xml;\r\n        let node = this.param_xml.findall(`./${apiname}/Parameters//param[@type=\\\"Int\\\"]`);\r\n        node.forEach(function (param_elem) {\r\n            temp_arr.push(param_elem.attrib.name);\r\n        });\r\n        // console.log(temp_arr);\r\n        temp_arr.forEach(function (opt_params) {\r\n            // console.log(opt_params);\r\n            let mode = param_xml.findall(`./${apiname}/Parameters//param[@name=\\\"${opt_params}\\\"]//mode`);\r\n            let mx = param_xml.findall(`./${apiname}/Parameters//param[@name=\\\"${opt_params}\\\"]//maximum`);\r\n            let mn = param_xml.findall(`./${apiname}/Parameters//param[@name=\\\"${opt_params}\\\"]//minimal`);\r\n            // console.log(mode);\r\n            let arr = [];\r\n            mode.forEach(function (md) {arr.push(md.text);});\r\n            mx.forEach(function (mx) {arr.push(mx.text);});\r\n            mn.forEach(function (mn) {arr.push(mn.text);});\r\n            // console.log(arr);\r\n            pattern[opt_params] = arr;\r\n        });\r\n        if (apiname === 'AioCheckOut'){\r\n            pattern['StoreExpireDate'].splice(1, 2);\r\n            pattern['StoreExpireDate'].splice(2, 1);\r\n        }\r\n        // console.log(pattern);\r\n        return pattern;\r\n    }\r\n\r\n    get_str_param_pattern(apiname){\r\n        let pattern = {};\r\n        let temp_arr = [];\r\n        let param_xml = this.param_xml;\r\n        let node = this.param_xml.findall(`./${apiname}/Parameters//param[@type=\\\"String\\\"]`);\r\n        node.forEach(function (param_elem) {\r\n            temp_arr.push(param_elem.attrib.name);\r\n        });\r\n        // console.log(temp_arr);\r\n        temp_arr.forEach(function (opt_params) {\r\n            // console.log(opt_params);\r\n            let pat_elems = param_xml.findall(`./${apiname}/Parameters//param[@name=\\\"${opt_params}\\\"]//pattern`);\r\n            let arr = [];\r\n            pat_elems.forEach(function (pa) {arr.push(pa.text);});\r\n            // console.log(arr);\r\n            pattern[opt_params] = arr.toString();\r\n        });\r\n        if (apiname === 'AioCheckOut'){\r\n            pattern['InvoiceMark'] = '';\r\n            pattern['PaymentInfoURL'] = pattern['PaymentInfoURL'].slice(11,21);\r\n            pattern['ClientRedirectURL'] = pattern['ClientRedirectURL'].slice(11,21);\r\n            pattern['Desc_1'] = pattern['Desc_1'].slice(10,20);\r\n            pattern['Desc_2'] = pattern['Desc_2'].slice(10,20);\r\n            pattern['Desc_3'] = pattern['Desc_3'].slice(10,20);\r\n            pattern['Desc_4'] = pattern['Desc_4'].slice(10,20);\r\n        }\r\n        // console.log(pattern);\r\n        return pattern;\r\n    }\r\n\r\n    get_depopt_param_pattern(apiname){\r\n        let pattern = {};\r\n        let param_xml = this.param_xml;\r\n        let p_name, parent_name;\r\n        let k, get_opts;\r\n        let k_opts = [];\r\n        let sub_opts = {};\r\n        let parent_n_opts = {};\r\n        let node = this.param_xml.findall(`./${apiname}/Parameters//param[@type=\\\"DepOpt\\\"]`);\r\n        node.forEach(function (param_elem) {\r\n            p_name = param_elem.attrib.name;\r\n            parent_name = param_elem.attrib.main;\r\n        });\r\n        k = this.param_xml.findall(`./${apiname}/Parameters//param[@name=\\\"${p_name}\\\"]//mainoption`);\r\n        k.forEach(function (elem) {\r\n           k_opts.push(elem.attrib.name);\r\n        });\r\n        k_opts.forEach(function (elem) {\r\n            get_opts = param_xml.findall(`./${apiname}/Parameters//mainoption[@name=\\\"${elem}\\\"]//option`);\r\n            let opt = [];\r\n            get_opts.forEach(function (c) {\r\n                opt.push(c.text);\r\n                sub_opts[elem] = opt;\r\n            });\r\n        });\r\n        // console.log(sub_opts);\r\n        parent_n_opts[parent_name] = sub_opts;\r\n        // console.log(parent_n_opts);\r\n        pattern[p_name] = parent_n_opts;\r\n        // console.log(pattern['ChooseSubPayment']['ChoosePayment']['BARCODE']);\r\n        return pattern;\r\n    }\r\n\r\n    get_all_pattern(apiname){\r\n        let res = {};\r\n        res['Type_idx'] = this.get_param_type(apiname);\r\n        res['Int'] = this.get_int_param_pattern(apiname);\r\n        res['String'] = this.get_str_param_pattern(apiname);\r\n        res['Opt'] = this.get_opt_param_pattern(apiname);\r\n        res['DepOpt'] = this.get_depopt_param_pattern(apiname);\r\n        return res;\r\n    }\r\n\r\n    verify_param_by_pattern(params, pattern){\r\n        // console.log(params);\r\n        // console.log(pattern);\r\n        let type_index = pattern['Type_idx'];\r\n        // console.log(type_index);\r\n        Object.keys(params).forEach(function (p_name) {\r\n           // console.log(p_name);\r\n           let p_type = type_index[p_name];\r\n           // console.log(p_type);\r\n           let patt_container = pattern[p_type];\r\n           // console.log(patt_container);\r\n           switch (p_type) {\r\n               case 'String':\r\n                   let regex_patt = patt_container[p_name];\r\n                   let mat = params[p_name].match(new RegExp(regex_patt));\r\n                   if (mat === null){\r\n                       throw new ECpayError.ECpayInvalidParam(`Wrong format of param ${p_name} or length exceeded.`);\r\n                   }\r\n                   break;\r\n               case 'Opt':\r\n                   let aval_opt = patt_container[p_name];\r\n                   let mat_opt = aval_opt.includes(params[p_name]);\r\n                   if (mat_opt === false){\r\n                       throw new ECpayError.ECpayInvalidParam(`Unexpected option of param ${p_name} (${params[p_name]}). Available option: (${aval_opt}).`);\r\n                   }\r\n                   break;\r\n               case 'Int':\r\n                   let criteria = patt_container[p_name];\r\n                   // console.log('criteria: '+ criteria);\r\n                   let mode = criteria[0];\r\n                   let max = parseInt(criteria[1]);\r\n                   let min = parseInt(criteria[2]);\r\n                   let val = parseInt(params[p_name]);\r\n                   // console.log('mode: '+ mode);\r\n                   // console.log('max: '+  max);\r\n                   // console.log('min: '+  min);\r\n                   // console.log('val: '+  val);\r\n                   switch (mode){\r\n                       case 'BETWEEN':\r\n                           if (val < min || val > max){\r\n                               throw new ECpayError.ECpayInvalidParam(`Value of ${p_name} should be between ${min} and ${max}.`);\r\n                           }\r\n                           break;\r\n                       case 'GE':\r\n                           if (val < min){\r\n                               throw new ECpayError.ECpayInvalidParam(`Value of ${p_name} should be greater than or equal to ${min}.`);\r\n                           }\r\n                           break;\r\n                       case 'LE':\r\n                           if (val > max){\r\n                               throw new ECpayError.ECpayInvalidParam(`Value of ${p_name} should be less than or equal to ${max}.`);\r\n                           }\r\n                           break;\r\n                       case 'EXCLUDE':\r\n                           if (val >= max && val <= max){\r\n                               throw new ECpayError.ECpayInvalidParam(`Value of ${p_name} can NOT be between ${min} and ${max}..`);\r\n                           }\r\n                           break;\r\n                       default:\r\n                           throw new ECpayError.ECpayInvalidParam(`Unexpected integer verification mode for parameter ${p_name}: ${mode}.`);\r\n                   }\r\n                   break;\r\n               case 'DepOpt':\r\n                   let dep_opt = patt_container[p_name];\r\n                   let parent_param = Object.keys(dep_opt)[0];\r\n                   let all_dep_opt = dep_opt[parent_param];\r\n                   let parent_val = params[parent_param];\r\n                   let aval_dopt = all_dep_opt[parent_val];\r\n                   if (aval_dopt === null && pattern['Opt'][parent_param].includes(parent_val) === false){\r\n                       throw new ECpayError.ECpayInvalidParam(`Cannot find available option of [${p_name}] by related param [${parent_param}](Value: ${parent_val}.`);\r\n                   } else if (aval_dopt.constructor === Array){\r\n                       if (!aval_dopt.includes(params[p_name])){\r\n                           throw new ECpayError.ECpayInvalidParam(`Unexpected option of param ${p_name} (${params[p_name]}). Available option: (${aval_dopt}).`);\r\n                       }\r\n                   }\r\n                   break;\r\n               default:\r\n                   throw new Error(`Unexpected type (${p_type}) for parameter ${p_name}.`);\r\n           }\r\n        });\r\n    }\r\n}\r\n\r\nclass AioCheckOutParamVerify extends PaymentVerifyBase{\r\n    constructor(){\r\n        super();\r\n        this.aio_basic_param = this.get_basic_params('AioCheckOut');\r\n        this.aio_conditional_param = this.get_cond_param('AioCheckOut');\r\n        this.all_param_pattern = this.get_all_pattern('AioCheckOut');\r\n    }\r\n\r\n    get_serialized_data(){\r\n        console.log(this.aio_basic_param);\r\n        console.log('-----');\r\n        console.log(this.aio_conditional_param);\r\n        let new_di = this.aio_conditional_param;\r\n        delete new_di['InvoiceMark'];\r\n        console.log(this.aio_conditional_param);\r\n        console.log('-----');\r\n        console.log(new_di);\r\n    }\r\n\r\n    verify_aio_payment_param(params){\r\n        if (params.constructor === Object){\r\n            // Force specify => DeviceSource, IgnorePayment, PlatformID, EncryptType\r\n            let fix_params = {\r\n                DeviceSource: '',\r\n                // PlatformID: '',\r\n                EncryptType: '1',\r\n                PaymentType: 'aio'\r\n            };\r\n            Object.assign(params, fix_params);\r\n            // Verify Basic param requirement\r\n            // if (params === {}){\r\n            //     throw new ECpayError.ECpayInvalidParam(`Parameter object is empty.`);\r\n            // }\r\n\r\n            let basic_param = this.aio_basic_param.sort();\r\n            let input_param = Object.keys(params).sort();\r\n            basic_param.forEach(function (pname) {\r\n               if (input_param.indexOf(pname, 0) === -1){\r\n                   throw new ECpayError.ECpayInvalidParam(`Lack required param ${pname}`);\r\n               }\r\n            });\r\n\r\n            // Verify Extend param requirement\r\n            let ext_param = this.aio_conditional_param;\r\n            delete ext_param['InvoiceMark'];\r\n            Object.keys(ext_param).forEach(function (pa) {\r\n               let val = params[pa];\r\n               let related_required_param = ext_param[pa][val];\r\n               if (related_required_param !== undefined && related_required_param !== []){\r\n                   related_required_param.forEach(function (e) {\r\n                       if (!Object.keys(params).includes(e)){\r\n                           throw new ECpayError.ECpayInvalidParam(`Lack required parameter [${e}] when [${pa}] is set to [${val}].`);\r\n                       }\r\n                   });\r\n               }\r\n            });\r\n\r\n            // Verify Value pattern of each param\r\n            this.verify_param_by_pattern(params, this.all_param_pattern);\r\n        } else {\r\n            throw new TypeError(`Received argument is not a Object.`);\r\n        }\r\n    }\r\n\r\n    verify_aio_inv_param(params){\r\n        if (params.constructor === Object){\r\n            // 發票所有參數預設要全帶\r\n            Object.keys(params).forEach(function (keys) {\r\n               if (params[keys] === null){\r\n                   throw new ECpayError.ECpayInvalidParam(`Parameter value cannot be null.`);\r\n               }\r\n            });\r\n            // 1. 比對欄位是否缺乏\r\n            let inv_param = this.aio_conditional_param['InvoiceMark']['Y'];\r\n            let input_param = Object.keys(params);\r\n            inv_param.forEach(function (pname) {\r\n                if (input_param.indexOf(pname, 0) === -1){\r\n                    throw new ECpayError.ECpayInvalidParam(`Lack required invoice param ${pname}`);\r\n                }\r\n            });\r\n            input_param.forEach(function (pname) {\r\n                if (inv_param.indexOf(pname, 0) === -1){\r\n                    throw new ECpayError.ECpayInvalidParam(`Unexpected parameter in Invoice parameters ${pname}`);\r\n                }\r\n            });\r\n\r\n            // let inv_param_names = this.aio_conditional_param['InvoiceMark']['Y'];\r\n            // let param_diff = inv_param_names - Object.keys(params);\r\n            // if (param_diff !== []){\r\n            //     throw new ECpayError.ECpayInvalidParam(`Lack required invoice param ${param_diff}`);\r\n            // }\r\n            // let unexp_param = Object.keys(params) - inv_param_names;\r\n            // if (unexp_param !== []){\r\n            //     throw new ECpayError.ECpayInvalidParam(`Unexpected parameter in Invoice parameters ${unexp_param}`);\r\n            // }\r\n\r\n            // 2. 比對特殊欄位值相依需求\r\n            // a [CarruerType]為1 => CustomerID 不能為空\r\n            if (params['CarruerType'] === '1'){\r\n                if (params['CustomerID'] === ''){\r\n                    throw new ECpayError.ECpayInvoiceRuleViolate(`[CustomerID] can not be empty when [CarruryType] is 1.`);\r\n                }\r\n            } // [CustomerID]不為空 => CarruerType 不能為空\r\n            else if (params['CarruerType'] === ''){\r\n                if (params['CustomerID'] !== ''){\r\n                    throw new ECpayError.ECpayInvoiceRuleViolate(`[CarruerType] can not be empty when [CustomerID] is not empty.`);\r\n                }\r\n            }\r\n            // b 列印註記[Print]為1 => CustomerName, CustomerAddr 不能為空\r\n            if (params['Print'] === '1'){\r\n                if (params['CustomerName'] === '' && params['CustomerAddr'] === ''){\r\n                    throw new ECpayError.ECpayInvoiceRuleViolate(`[CustomerName] and [CustomerAddr] can not be empty when [Print] is 1.`);\r\n                }\r\n                if (params['CustomerID'] !== ''){\r\n                    throw new ECpayError.ECpayInvoiceRuleViolate(`[Print] can not be '1' when [CustomerID] is not empty.`);\r\n                }\r\n            }\r\n            // c CustomerPhone和CustomerEmail至少一個要有值\r\n            if (params['CustomerPhone'] === '' && params['CustomerEmail'] === ''){\r\n                throw new ECpayError.ECpayInvoiceRuleViolate(`[CustomerPhone] and [CustomerEmail] can not both be empty.`);\r\n            }\r\n            // d 別[TaxType]為2 => ClearanceMark = 1 or 2 and InvoiceItemTaxType must include '2'\r\n            if (params['TaxType'] === '2'){\r\n                if (params['ClearanceMark'] !== '1' && params['ClearanceMark'] !== '2'){\r\n                    throw new ECpayError.ECpayInvoiceRuleViolate(`[ClearanceMark] has to be 1 or 2 when [TaxType] is 2.`);\r\n                }\r\n                if (!params['InvoiceItemTaxType'].includes('2')){\r\n                    throw new ECpayError.ECpayInvoiceRuleViolate(`[InvoiceItemTaxType] must contain at lease one '2' when [TaxType] is 2.`);\r\n                }\r\n            }\r\n            // e 統一編號[CustomerIdentifier]有值時 => CarruerType != 1 or 2, Donation = 0, Print = 1\r\n            if (params['CustomerIdentifier'] !== ''){\r\n                if (params['CarruerType'] === '1' || params['CarruerType'] === '2'){\r\n                    throw new ECpayError.ECpayInvoiceRuleViolate(`[CarruerType] Cannot be 1 or 2 when [CustomerIdentifier] is given.`);\r\n                }\r\n            }\r\n            // [CarruerType]為'' or 1 時 : CarruerNum = '', [CarruerType]為2, CarruerNum = 固定長度為16且格式為2碼大小寫字母加上14碼數字。\r\n            // [CarruerType]為3, 固定長度為8且格式為1碼斜線「/」加上7碼數字及大小寫字母組成\r\n            if (params['CarruerType'] === '' || params['CarruerType'] === '1'){\r\n                if (params['CarruerNum'] !== ''){\r\n                    throw new ECpayError.ECpayInvoiceRuleViolate(`[CarruerNum] must be empty when [CarruerType] is empty or 1.`);\r\n                }\r\n            } else if (params['CarruerType'] === '2'){\r\n                if (params['CarruerNum'].match(new RegExp(/[A-Za-z]{2}[0-9]{14}/)) === null){\r\n                    throw new ECpayError.ECpayInvoiceRuleViolate(`[CarruerNum] must be 2 alphabets and 14 numbers when [CarruerType] is 2.`);\r\n                }\r\n            } else if (params['CarruerType'] === '3'){\r\n                if (params['CarruerNum'].match(new RegExp(/^\\/[A-Za-z0-9\\s+-]{7}$/)) === null){\r\n                    throw new ECpayError.ECpayInvoiceRuleViolate(`[CarruerNum] must start with '/' followed by 7 alphabet and number characters when [CarruerType] is 3.`);\r\n                }\r\n            } else {\r\n                throw new ECpayError.ECpayInvoiceRuleViolate(`Unexpected value in [CarruerType].`);\r\n            }\r\n            // [CarruerType]有值時，Print必須有為0\r\n            if (params['CarruerType'] !== '' && params['Print'] !== '0'){\r\n                throw new  ECpayError.ECpayInvoiceRuleViolate(`[Print] must be 0 when [CarruerType] has value.`);\r\n            }\r\n            // Donation = 1 => LoveCode不能為空, Print = 0\r\n            if (params['Donation'] === '1'){\r\n                if (params['LoveCode'] === ''){\r\n                    throw new ECpayError.ECpayInvoiceRuleViolate(`[LoveCode] cannot be empty when [Donation] is 1.`);\r\n                }\r\n                if (params['Print'] !== '0'){\r\n                    throw new ECpayError.ECpayInvoiceRuleViolate(`[Print] must be 0 when [Donation] is 1.`);\r\n                }\r\n            }\r\n\r\n            // 3. 比對商品名稱，數量，單位，價格，tax項目數量是否一致\r\n            let item_params = ['InvoiceItemCount', 'InvoiceItemWord', 'InvoiceItemPrice', 'InvoiceItemTaxType'];\r\n            // 商品名稱含有管線 => 認為是多樣商品 *InvoiceItemName, *InvoiceItemCount, *InvoiceItemWord, *InvoiceItemPrice, *InvoiceItemTaxType逐一用管線分割，計算數量後與第一個比對\r\n            if (params['InvoiceItemName'] === ''){\r\n                throw new ECpayError.ECpayInvoiceRuleViolate(`[InvoiceItemName] is empty.`);\r\n            } else {\r\n                if (params['InvoiceItemName'].includes('|')){\r\n                    let item_cnt = params['InvoiceItemName'].split('|').length;\r\n                    item_params.forEach(function (param_name) {\r\n                        // Check if there's empty value.\r\n                        if (params[param_name].match(new RegExp(/(\\|\\||^\\||\\|$)/)) !== null){\r\n                            throw new ECpayError.ECpayInvoiceRuleViolate(`[${param_name}] contains empty value.`);\r\n                        }\r\n                        let p_cnt = params[param_name].split('|').length;\r\n                        if (item_cnt !== p_cnt){\r\n                            throw new ECpayError.ECpayInvoiceRuleViolate(`Count of item info [${param_name}] (${p_cnt}) not match count from [InvoiceItemName] (${item_cnt}).`);\r\n                        }\r\n                    });\r\n                    // 課稅類別[TaxType] = 9時 => InvoiceItemTaxType 能含有1,2,3(and at least contains one 1 and other)\r\n                    let item_tax = params['InvoiceItemTaxType'].split('|');\r\n                    let aval_tax_type = ['1', '2', '3'];\r\n                    let vio_tax_t = item_tax - aval_tax_type;\r\n                    if (vio_tax_t === []){\r\n                        throw new ECpayError.ECpayInvoiceRuleViolate(`Illegal [InvoiceItemTaxType]: ${vio_tax_t}`);\r\n                    }\r\n                    if (params['TaxType'] === '9'){\r\n                        if (!item_tax.includes('1')){\r\n                            throw new ECpayError.ECpayInvoiceRuleViolate(`[InvoiceItemTaxType] must contain at lease one '1'.`);\r\n                        }\r\n                        if (item_tax.includes('2') && item_tax.includes('3')){\r\n                            throw new ECpayError.ECpayInvoiceRuleViolate(`[InvoiceItemTaxType] cannot contain 2 and 3 at the same time.`);\r\n                        }\r\n                    }\r\n                } else {\r\n                    // 沒有管線 => 逐一檢查後4項有無管線\r\n                    item_params.forEach(function (param_name) {\r\n                        if (params[param_name].includes('|')){\r\n                            throw new ECpayError.ECpayInvoiceRuleViolate(`Item info [${param_name}] contain pipeline delimiter but there's only one item in param [InvoiceItemName].`);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            // 4. 比對所有欄位Pattern\r\n            this.verify_param_by_pattern(params, this.all_param_pattern);\r\n        } else {\r\n            throw TypeError(`Received argument is not a object.`);\r\n        }\r\n    }\r\n}\r\n\r\nclass QueryParamVerify extends PaymentVerifyBase{\r\n    constructor(apiname){\r\n        super();\r\n        this.aio_basic_param = this.get_basic_params(apiname);\r\n        this.aio_conditional_param = this.get_cond_param(apiname);\r\n        this.all_param_pattern = this.get_all_pattern(apiname);\r\n    }\r\n\r\n    verify_query_param(params){\r\n        if (params.constructor === Object){\r\n            let basic_param = this.aio_basic_param.sort();\r\n            let input_param = Object.keys(params).sort();\r\n            basic_param.forEach(function (pname) {\r\n                if (input_param.indexOf(pname, 0) === -1){\r\n                    throw new ECpayError.ECpayInvalidParam(`Lack required param ${pname}`);\r\n                }\r\n            });\r\n\r\n            // Verify Value pattern of each param\r\n            this.verify_param_by_pattern(params, this.all_param_pattern);\r\n        } else {\r\n          throw new TypeError(`Received argument is not a object`);\r\n        }\r\n    }\r\n}\r\n\r\nclass ActParamVerify extends PaymentVerifyBase{\r\n    constructor(apiname){\r\n        super();\r\n        this.aio_basic_param = this.get_basic_params(apiname);\r\n        this.aio_conditional_param = this.get_cond_param(apiname);\r\n        this.all_param_pattern = this.get_all_pattern(apiname);\r\n    }\r\n\r\n    verify_act_param(params){\r\n        if (params.constructor === Object){\r\n            let basic_param = this.aio_basic_param.sort();\r\n            let input_param = Object.keys(params).sort();\r\n            basic_param.forEach(function (pname) {\r\n                if (input_param.indexOf(pname, 0) === -1){\r\n                    throw new ECpayError.ECpayInvalidParam(`Lack required param ${pname}`);\r\n                }\r\n            });\r\n\r\n            // Verify Value pattern of each param\r\n            this.verify_param_by_pattern(params, this.all_param_pattern);\r\n        } else {\r\n            throw new TypeError(`Received argument is not a object`);\r\n        }\r\n    }\r\n}\r\nmodule.exports = {\r\n    PaymentVerifyBase: PaymentVerifyBase,\r\n    AioCheckOutParamVerify: AioCheckOutParamVerify,\r\n    QueryParamVerify: QueryParamVerify,\r\n    ActParamVerify: ActParamVerify\r\n};"]},"metadata":{},"sourceType":"script"}