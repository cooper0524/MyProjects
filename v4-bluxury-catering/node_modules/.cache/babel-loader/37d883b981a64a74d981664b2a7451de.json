{"ast":null,"code":"var _jsxFileName = \"/Users/Cooper/Bluxury_Catering/bluxury-catering/src/components/RegisterForm.jsx\";\nimport React, { useState } from \"react\";\nimport logo from \"../assets/logo.png\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\n\nconst RegisterForm = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, swtPassword] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  console.log(email);\n  const validationSchema = Yup.object().shape({\n    firstName: Yup.string().required(\"First Name is required\"),\n    lastName: Yup.string().required(\"Last Name is required\"),\n    email: Yup.string().email(\"Email is invalid\").required(\"Email is required\"),\n    password: Yup.string().min(6, \"Password must be at least 6 characters\").required(\"Password is required\"),\n    confirmPassword: Yup.string().oneOf([Yup.ref(\"password\"), null], \"Passwords must match\").required(\"Confirm Password is required\")\n  });\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\"\n    },\n    onSubmit: fields => {\n      alert(\"SUCCESS!! :-)\\n\\n\" + JSON.stringify(fields, null, 4));\n    },\n    render: ({\n      errors,\n      status,\n      touched\n    }) => /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"firstName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    }, \"First Name\"), /*#__PURE__*/React.createElement(Field, {\n      name: \"firstName\",\n      type: \"text\",\n      className: \"form-control\" + (errors.firstName && touched.firstName ? \" is-invalid\" : \"\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(ErrorMessage, {\n      name: \"firstName\",\n      component: \"div\",\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"lastName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }, \"Last Name\"), /*#__PURE__*/React.createElement(Field, {\n      name: \"lastName\",\n      type: \"text\",\n      className: \"form-control\" + (errors.lastName && touched.lastName ? \" is-invalid\" : \"\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(ErrorMessage, {\n      name: \"lastName\",\n      component: \"div\",\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, \"Email\"), /*#__PURE__*/React.createElement(Field, {\n      name: \"email\",\n      type: \"text\",\n      className: \"form-control\" + (errors.email && touched.email ? \" is-invalid\" : \"\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(ErrorMessage, {\n      name: \"email\",\n      component: \"div\",\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(Field, {\n      name: \"password\",\n      type: \"password\",\n      className: \"form-control\" + (errors.password && touched.password ? \" is-invalid\" : \"\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(ErrorMessage, {\n      name: \"password\",\n      component: \"div\",\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"confirmPassword\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }, \"Confirm Password\"), /*#__PURE__*/React.createElement(Field, {\n      name: \"confirmPassword\",\n      type: \"password\",\n      className: \"form-control\" + (errors.confirmPassword && touched.confirmPassword ? \" is-invalid\" : \"\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(ErrorMessage, {\n      name: \"confirmPassword\",\n      component: \"div\",\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-primary mr-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }, \"Register\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"reset\",\n      className: \"btn btn-secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }\n    }, \"Reset\"))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default RegisterForm;","map":{"version":3,"sources":["/Users/Cooper/Bluxury_Catering/bluxury-catering/src/components/RegisterForm.jsx"],"names":["React","useState","logo","Formik","Form","Field","ErrorMessage","Yup","RegisterForm","email","setEmail","password","swtPassword","username","setUsername","console","log","validationSchema","object","shape","firstName","string","required","lastName","min","confirmPassword","oneOf","ref","fields","alert","JSON","stringify","errors","status","touched"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,YAA9B,QAAkD,QAAlD;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;;AAEA,MAAMC,YAAY,GAAG,MAAM;AACzB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,EAAD,CAAxC;AACAc,EAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AAEA,QAAMQ,gBAAgB,GAAGV,GAAG,CAACW,MAAJ,GAAaC,KAAb,CAAmB;AAC1CC,IAAAA,SAAS,EAAEb,GAAG,CAACc,MAAJ,GAAaC,QAAb,CAAsB,wBAAtB,CAD+B;AAE1CC,IAAAA,QAAQ,EAAEhB,GAAG,CAACc,MAAJ,GAAaC,QAAb,CAAsB,uBAAtB,CAFgC;AAG1Cb,IAAAA,KAAK,EAAEF,GAAG,CAACc,MAAJ,GAAaZ,KAAb,CAAmB,kBAAnB,EAAuCa,QAAvC,CAAgD,mBAAhD,CAHmC;AAI1CX,IAAAA,QAAQ,EAAEJ,GAAG,CAACc,MAAJ,GACPG,GADO,CACH,CADG,EACA,wCADA,EAEPF,QAFO,CAEE,sBAFF,CAJgC;AAO1CG,IAAAA,eAAe,EAAElB,GAAG,CAACc,MAAJ,GACdK,KADc,CACR,CAACnB,GAAG,CAACoB,GAAJ,CAAQ,UAAR,CAAD,EAAsB,IAAtB,CADQ,EACqB,sBADrB,EAEdL,QAFc,CAEL,8BAFK;AAPyB,GAAnB,CAAzB;AAYA,sBACE,oBAAC,MAAD;AACE,IAAA,aAAa,EAAE;AACbF,MAAAA,SAAS,EAAE,EADE;AAEbG,MAAAA,QAAQ,EAAE,EAFG;AAGbd,MAAAA,KAAK,EAAE,EAHM;AAIbE,MAAAA,QAAQ,EAAE,EAJG;AAKbc,MAAAA,eAAe,EAAE;AALJ,KADjB;AAQE,IAAA,QAAQ,EAAGG,MAAD,IAAY;AACpBC,MAAAA,KAAK,CAAC,sBAAsBC,IAAI,CAACC,SAAL,CAAeH,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAvB,CAAL;AACD,KAVH;AAWE,IAAA,MAAM,EAAE,CAAC;AAAEI,MAAAA,MAAF;AAAUC,MAAAA,MAAV;AAAkBC,MAAAA;AAAlB,KAAD,kBACN,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAO,MAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,WADP;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,SAAS,EACP,kBACCF,MAAM,CAACZ,SAAP,IAAoBc,OAAO,CAACd,SAA5B,GAAwC,aAAxC,GAAwD,EADzD,CAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAUE,oBAAC,YAAD;AACE,MAAA,IAAI,EAAC,WADP;AAEE,MAAA,SAAS,EAAC,KAFZ;AAGE,MAAA,SAAS,EAAC,kBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,CADF,eAiBE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAO,MAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,SAAS,EACP,kBACCY,MAAM,CAACT,QAAP,IAAmBW,OAAO,CAACX,QAA3B,GAAsC,aAAtC,GAAsD,EADvD,CAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAUE,oBAAC,YAAD;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,SAAS,EAAC,KAFZ;AAGE,MAAA,SAAS,EAAC,kBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,CAjBF,eAiCE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAO,MAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,OADP;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,SAAS,EACP,kBACCS,MAAM,CAACvB,KAAP,IAAgByB,OAAO,CAACzB,KAAxB,GAAgC,aAAhC,GAAgD,EADjD,CAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAUE,oBAAC,YAAD;AACE,MAAA,IAAI,EAAC,OADP;AAEE,MAAA,SAAS,EAAC,KAFZ;AAGE,MAAA,SAAS,EAAC,kBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,CAjCF,eAiDE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAO,MAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,IAAI,EAAC,UAFP;AAGE,MAAA,SAAS,EACP,kBACCuB,MAAM,CAACrB,QAAP,IAAmBuB,OAAO,CAACvB,QAA3B,GAAsC,aAAtC,GAAsD,EADvD,CAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAUE,oBAAC,YAAD;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,SAAS,EAAC,KAFZ;AAGE,MAAA,SAAS,EAAC,kBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,CAjDF,eAiEE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAO,MAAA,OAAO,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,eAEE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,iBADP;AAEE,MAAA,IAAI,EAAC,UAFP;AAGE,MAAA,SAAS,EACP,kBACCqB,MAAM,CAACP,eAAP,IAA0BS,OAAO,CAACT,eAAlC,GACG,aADH,GAEG,EAHJ,CAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAYE,oBAAC,YAAD;AACE,MAAA,IAAI,EAAC,iBADP;AAEE,MAAA,SAAS,EAAC,KAFZ;AAGE,MAAA,SAAS,EAAC,kBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,CAjEF,eAmFE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAC,sBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE;AAAQ,MAAA,IAAI,EAAC,OAAb;AAAqB,MAAA,SAAS,EAAC,mBAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJF,CAnFF,CAZJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AA4GD,CA9HD;;AAgIA,eAAejB,YAAf","sourcesContent":["import React, { useState } from \"react\";\n\nimport logo from \"../assets/logo.png\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\n\nconst RegisterForm = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, swtPassword] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  console.log(email);\n\n  const validationSchema = Yup.object().shape({\n    firstName: Yup.string().required(\"First Name is required\"),\n    lastName: Yup.string().required(\"Last Name is required\"),\n    email: Yup.string().email(\"Email is invalid\").required(\"Email is required\"),\n    password: Yup.string()\n      .min(6, \"Password must be at least 6 characters\")\n      .required(\"Password is required\"),\n    confirmPassword: Yup.string()\n      .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\n      .required(\"Confirm Password is required\"),\n  });\n\n  return (\n    <Formik\n      initialValues={{\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n      }}\n      onSubmit={(fields) => {\n        alert(\"SUCCESS!! :-)\\n\\n\" + JSON.stringify(fields, null, 4));\n      }}\n      render={({ errors, status, touched }) => (\n        <Form>\n          <div className=\"form-group\">\n            <label htmlFor=\"firstName\">First Name</label>\n            <Field\n              name=\"firstName\"\n              type=\"text\"\n              className={\n                \"form-control\" +\n                (errors.firstName && touched.firstName ? \" is-invalid\" : \"\")\n              }\n            />\n            <ErrorMessage\n              name=\"firstName\"\n              component=\"div\"\n              className=\"invalid-feedback\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"lastName\">Last Name</label>\n            <Field\n              name=\"lastName\"\n              type=\"text\"\n              className={\n                \"form-control\" +\n                (errors.lastName && touched.lastName ? \" is-invalid\" : \"\")\n              }\n            />\n            <ErrorMessage\n              name=\"lastName\"\n              component=\"div\"\n              className=\"invalid-feedback\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"email\">Email</label>\n            <Field\n              name=\"email\"\n              type=\"text\"\n              className={\n                \"form-control\" +\n                (errors.email && touched.email ? \" is-invalid\" : \"\")\n              }\n            />\n            <ErrorMessage\n              name=\"email\"\n              component=\"div\"\n              className=\"invalid-feedback\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"password\">Password</label>\n            <Field\n              name=\"password\"\n              type=\"password\"\n              className={\n                \"form-control\" +\n                (errors.password && touched.password ? \" is-invalid\" : \"\")\n              }\n            />\n            <ErrorMessage\n              name=\"password\"\n              component=\"div\"\n              className=\"invalid-feedback\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"confirmPassword\">Confirm Password</label>\n            <Field\n              name=\"confirmPassword\"\n              type=\"password\"\n              className={\n                \"form-control\" +\n                (errors.confirmPassword && touched.confirmPassword\n                  ? \" is-invalid\"\n                  : \"\")\n              }\n            />\n            <ErrorMessage\n              name=\"confirmPassword\"\n              component=\"div\"\n              className=\"invalid-feedback\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <button type=\"submit\" className=\"btn btn-primary mr-2\">\n              Register\n            </button>\n            <button type=\"reset\" className=\"btn btn-secondary\">\n              Reset\n            </button>\n          </div>\n        </Form>\n      )}\n    />\n  );\n};\n\nexport default RegisterForm;\n"]},"metadata":{},"sourceType":"module"}